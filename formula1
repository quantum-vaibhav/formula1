{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":6358464,"sourceType":"datasetVersion","datasetId":468218},{"sourceId":7762146,"sourceType":"datasetVersion","datasetId":4539765}],"dockerImageVersionId":30664,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"### Importing Modules","metadata":{}},{"cell_type":"code","source":"import requests\nfrom bs4 import BeautifulSoup\nfrom io import StringIO\n\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:38:17.823290Z","iopub.execute_input":"2024-04-23T06:38:17.823793Z","iopub.status.idle":"2024-04-23T06:38:20.366175Z","shell.execute_reply.started":"2024-04-23T06:38:17.823751Z","shell.execute_reply":"2024-04-23T06:38:20.364799Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":"### Reading Dataset","metadata":{}},{"cell_type":"code","source":"df_circuits = pd.read_csv(\"/kaggle/input/formula-1-world-championship-1950-2020/circuits.csv\")\ndf_constructors = pd.read_csv(\"/kaggle/input/formula-1-world-championship-1950-2020/constructors.csv\")\ndf_constructor_results = pd.read_csv(\"/kaggle/input/formula-1-world-championship-1950-2020/constructor_results.csv\")\ndf_constructor_standings = pd.read_csv(\"/kaggle/input/formula-1-world-championship-1950-2020/constructor_standings.csv\")\ndf_driver_standings = pd.read_csv(\"/kaggle/input/formula-1-world-championship-1950-2020/driver_standings.csv\")\ndf_drivers = pd.read_csv(\"/kaggle/input/formula-1-world-championship-1950-2020/drivers.csv\")\ndf_lap_times = pd.read_csv(\"/kaggle/input/formula-1-world-championship-1950-2020/lap_times.csv\")\ndf_pit_stops = pd.read_csv(\"/kaggle/input/formula-1-world-championship-1950-2020/pit_stops.csv\")\ndf_qualifying = pd.read_csv(\"/kaggle/input/formula-1-world-championship-1950-2020/qualifying.csv\")\ndf_results = pd.read_csv(\"/kaggle/input/formula-1-world-championship-1950-2020/results.csv\")\ndf_seasons = pd.read_csv(\"/kaggle/input/formula-1-world-championship-1950-2020/seasons.csv\")\ndf_sprint_results = pd.read_csv(\"/kaggle/input/formula-1-world-championship-1950-2020/sprint_results.csv\")\ndf_status = pd.read_csv(\"/kaggle/input/formula-1-world-championship-1950-2020/status.csv\")\ndf_races = pd.read_csv(\"/kaggle/input/formula-1-world-championship-1950-2020/races.csv\")\ndf_weather = pd.read_csv(\"/kaggle/input/f1-weather-dataset-2018-2023/F1 Weather(2023-2018).csv\")\ndf_status = pd.read_csv(\"/kaggle/input/formula-1-world-championship-1950-2020/status.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:38:20.368687Z","iopub.execute_input":"2024-04-23T06:38:20.369790Z","iopub.status.idle":"2024-04-23T06:38:21.759823Z","shell.execute_reply.started":"2024-04-23T06:38:20.369739Z","shell.execute_reply":"2024-04-23T06:38:21.758483Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":"## Data Collection\n### Gather the necessary data. This could involve scraping data from websites, using APIs (check my [Kaggle Notebook](http://https://www.kaggle.com/code/quantumkaze/f1-weather-extract-using-fastf1)), or finding datasets online. The data might include details about the drivers, teams, cars, races, circuits, weather conditions, etc.","metadata":{"execution":{"iopub.status.busy":"2024-03-05T14:00:50.643956Z","iopub.execute_input":"2024-03-05T14:00:50.645103Z","iopub.status.idle":"2024-03-05T14:00:50.649488Z","shell.execute_reply.started":"2024-03-05T14:00:50.645059Z","shell.execute_reply":"2024-03-05T14:00:50.648382Z"}}},{"cell_type":"code","source":"# Extract the length of track and no. turns from the wikipedia url given in df_circuits.\n# And merge Length and Turns into the dataframe df_circuits\n\nlen_turn_data = []\n\ndef length_turn(url, cId):\n    response = requests.get(url)\n\n    # Parse the HTML content\n    soup = BeautifulSoup(response.content, \"html.parser\")\n\n    # Find the table element\n    table = soup.find(\"table\", class_=\"infobox\")\n    df = pd.read_html(StringIO(str(table)))[0]\n    \n    # If Length/Turns is not available set them to 0.\n    try:\n        length = df.loc[np.where(df == 'Length')[0][0]].iloc[1]\n        turns = df.loc[np.where(df == 'Turns')[0][0]].iloc[1]\n    except IndexError:\n        length = '0.0000'\n        turns = '0'\n\n    # Append the List: [circuitId, Length, Turns]\n    len_turn_data.append([cId, length, turns])\n\n# Function to extract Length and Turns for each circuit according to circuitId\nfor cId, url in zip(df_circuits.circuitId, df_circuits.url):\n    length_turn(url, cId)\n\n# Convert the Length and Turns column in float and int types\ndf_len_turn = pd.DataFrame(data=len_turn_data, columns=[\"circuitId\", \"Length\", \"Turns\"])\n\ndf_len_turn['Length'] = df_len_turn['Length'].str[:5].astype(float)\ndf_len_turn['Turns'] = df_len_turn['Turns'].str[:2].astype(int)\n\n# Merge the Length & Turns dataframe to df_circuits according to circuitId\ndf_circuits = df_circuits.merge(df_len_turn, on='circuitId', how='left')","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:38:21.761748Z","iopub.execute_input":"2024-04-23T06:38:21.762557Z","iopub.status.idle":"2024-04-23T06:39:01.382860Z","shell.execute_reply.started":"2024-04-23T06:38:21.762505Z","shell.execute_reply":"2024-04-23T06:39:01.381500Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":"# Data Cleaning and Preprocessing\n### In this section. I will clean the data and handle missing values, outliers, and incorrect data. Convert data into the correct formats. For example, time durations might need to be converted into seconds for easier analysis.","metadata":{}},{"cell_type":"code","source":"# Uncomment to set row option\n\n#pd.set_option('display.max_rows', None)\n#pd.reset_option('display.max_rows')","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:01.386409Z","iopub.execute_input":"2024-04-23T06:39:01.386880Z","iopub.status.idle":"2024-04-23T06:39:01.394994Z","shell.execute_reply.started":"2024-04-23T06:39:01.386837Z","shell.execute_reply":"2024-04-23T06:39:01.393725Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"# Circuits\ndf_circuits\n\n# Replaces '\\N' values with NaN\ndf_circuits['alt'] = df_circuits['alt'].replace('\\\\N', np.nan)\ndf_circuits['alt'] = df_circuits['alt'].astype(float)\n\ndf_circuits[df_circuits['alt'].isna()] # 3 rows\ndf_circuits[df_circuits['Length']==0.000] # 7 rows\n\n# Replacing missing values with mean of data\ndf_circuits['Length'] = df_circuits['Length'].replace(0, df_circuits[df_circuits['Length'] != 0]['Length'].mean()).astype(float)\ndf_circuits['Turns'] = df_circuits['Turns'].replace(0, df_circuits[df_circuits['Turns'] != 0]['Turns'].mean()).astype(int)\ndf_circuits.loc[:, 'alt'] = df_circuits['alt'].fillna(df_circuits['alt'].mean()).astype(int)\n\ndf_circuits['laps'] = (305/df_circuits['Length']).astype(int)\n\ndf_circuits.to_csv('circuits.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:01.396500Z","iopub.execute_input":"2024-04-23T06:39:01.396834Z","iopub.status.idle":"2024-04-23T06:39:01.444561Z","shell.execute_reply.started":"2024-04-23T06:39:01.396805Z","shell.execute_reply":"2024-04-23T06:39:01.443205Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"# Constructor Results\ndf_constructor_results","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:01.446299Z","iopub.execute_input":"2024-04-23T06:39:01.446785Z","iopub.status.idle":"2024-04-23T06:39:01.474342Z","shell.execute_reply.started":"2024-04-23T06:39:01.446741Z","shell.execute_reply":"2024-04-23T06:39:01.472852Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"       constructorResultsId  raceId  constructorId  points status\n0                         1      18              1    14.0     \\N\n1                         2      18              2     8.0     \\N\n2                         3      18              3     9.0     \\N\n3                         4      18              4     5.0     \\N\n4                         5      18              5     2.0     \\N\n...                     ...     ...            ...     ...    ...\n12285                 16785    1110            214    10.0     \\N\n12286                 16786    1110            213     1.0     \\N\n12287                 16787    1110             51     0.0     \\N\n12288                 16788    1110              3     0.0     \\N\n12289                 16789    1110            210     0.0     \\N\n\n[12290 rows x 5 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>constructorResultsId</th>\n      <th>raceId</th>\n      <th>constructorId</th>\n      <th>points</th>\n      <th>status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>18</td>\n      <td>1</td>\n      <td>14.0</td>\n      <td>\\N</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>18</td>\n      <td>2</td>\n      <td>8.0</td>\n      <td>\\N</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>18</td>\n      <td>3</td>\n      <td>9.0</td>\n      <td>\\N</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>18</td>\n      <td>4</td>\n      <td>5.0</td>\n      <td>\\N</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>18</td>\n      <td>5</td>\n      <td>2.0</td>\n      <td>\\N</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>12285</th>\n      <td>16785</td>\n      <td>1110</td>\n      <td>214</td>\n      <td>10.0</td>\n      <td>\\N</td>\n    </tr>\n    <tr>\n      <th>12286</th>\n      <td>16786</td>\n      <td>1110</td>\n      <td>213</td>\n      <td>1.0</td>\n      <td>\\N</td>\n    </tr>\n    <tr>\n      <th>12287</th>\n      <td>16787</td>\n      <td>1110</td>\n      <td>51</td>\n      <td>0.0</td>\n      <td>\\N</td>\n    </tr>\n    <tr>\n      <th>12288</th>\n      <td>16788</td>\n      <td>1110</td>\n      <td>3</td>\n      <td>0.0</td>\n      <td>\\N</td>\n    </tr>\n    <tr>\n      <th>12289</th>\n      <td>16789</td>\n      <td>1110</td>\n      <td>210</td>\n      <td>0.0</td>\n      <td>\\N</td>\n    </tr>\n  </tbody>\n</table>\n<p>12290 rows × 5 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Constructor Standings\ndf_constructor_standings\n\ndf_constructor_standings = df_constructor_standings.merge(df_constructors[['constructorId', 'name']], on='constructorId', how='left')\n\ndf_constructor_standings = df_constructor_standings.merge(df_races[['raceId', 'date']], on='raceId')","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:01.476406Z","iopub.execute_input":"2024-04-23T06:39:01.478967Z","iopub.status.idle":"2024-04-23T06:39:01.498715Z","shell.execute_reply.started":"2024-04-23T06:39:01.478909Z","shell.execute_reply":"2024-04-23T06:39:01.497264Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"# Drivers\ndf_drivers\n\n# No need for driver number\ndf_drivers.drop('number', axis=1, inplace=True)\n\n# Adding driver 'Name' column instead of forename and surname\ndf_drivers['Name'] = df_drivers['forename'] + ' ' + df_drivers['surname']\n\n# Adding code for each driver i.e, the first 3 letter of the surname\ndf_drivers['surname'] = df_drivers['surname'].str.replace(' ', '')\n\ndef replace_code(row):\n    if row['code'] == '\\\\N':\n        return row['surname'][:3].upper()\n    else:\n        return row['code']\n\ndf_drivers['code'] = df_drivers.apply(replace_code, axis=1)\n\n# Dropping columns\ndf_drivers.drop(columns=['driverRef', 'forename', 'surname', 'url'], axis=1, inplace=True)\n\ndf_drivers.to_csv('drivers.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:01.502581Z","iopub.execute_input":"2024-04-23T06:39:01.503554Z","iopub.status.idle":"2024-04-23T06:39:01.542331Z","shell.execute_reply.started":"2024-04-23T06:39:01.503505Z","shell.execute_reply":"2024-04-23T06:39:01.541048Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"# Driver Standings\ndf_driver_standings\n\ndf_driver_standings = df_driver_standings.merge(df_drivers[['driverId', 'Name']], on='driverId', how='left')","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:01.547095Z","iopub.execute_input":"2024-04-23T06:39:01.547524Z","iopub.status.idle":"2024-04-23T06:39:01.564092Z","shell.execute_reply.started":"2024-04-23T06:39:01.547490Z","shell.execute_reply":"2024-04-23T06:39:01.562437Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"# Lap Times\ndf_lap_times\n\ndf_lap_times = df_lap_times[df_lap_times['raceId'].isin(df_races['raceId'])]\n\n# Assuming df_lap_times is your DataFrame and 'milliseconds' is the column with lap times\nQ1 = df_lap_times['milliseconds'].quantile(0.25)\nQ3 = df_lap_times['milliseconds'].quantile(0.75)\nIQR = Q3 - Q1\n\n# Define a filter for outliers\nfilter = (df_lap_times['milliseconds'] >= Q1 - 1.5 * IQR) & (df_lap_times['milliseconds'] <= Q3 + 1.5 *IQR)\n\n# Create a new column 'outlier' that is True where the row is an outlier and False otherwise\ndf_lap_times['outlier'] = ~filter\n\n# Plot the 'milliseconds' column, coloring by the 'outlier' column\nplt.figure(figsize=(10, 6))\nplt.scatter(df_lap_times.index, df_lap_times['milliseconds'], c=df_lap_times['outlier'])\nplt.title('Outliers in Lap Times')\nplt.xlabel('Index')\nplt.ylabel('Milliseconds')\nplt.show()\n\n# Todo: Lap times acc to drivers","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:01.570596Z","iopub.execute_input":"2024-04-23T06:39:01.571007Z","iopub.status.idle":"2024-04-23T06:39:13.440726Z","shell.execute_reply.started":"2024-04-23T06:39:01.570969Z","shell.execute_reply":"2024-04-23T06:39:13.439290Z"},"trusted":true},"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# Removing lap times above 10 minutes\n\ndf_lap_times = df_lap_times[df_lap_times['milliseconds'] < 600000]","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:13.442422Z","iopub.execute_input":"2024-04-23T06:39:13.442929Z","iopub.status.idle":"2024-04-23T06:39:13.483044Z","shell.execute_reply.started":"2024-04-23T06:39:13.442895Z","shell.execute_reply":"2024-04-23T06:39:13.481801Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"# Pit Stops\ndf_pit_stops\n\ndf_pit_stops = df_pit_stops[df_pit_stops['raceId'].isin(df_races['raceId'])]\n\nimport matplotlib.pyplot as plt\n\n# Assuming df_pit_stops is your DataFrame and 'milliseconds' is the column with lap times\nQ1 = df_pit_stops['milliseconds'].quantile(0.25)\nQ3 = df_pit_stops['milliseconds'].quantile(0.75)\nIQR = Q3 - Q1\n\n# Define a filter for outliers\nfilter = (df_pit_stops['milliseconds'] >= Q1 - 1.5 * IQR) & (df_pit_stops['milliseconds'] <= Q3 + 1.5 *IQR)\n\n# Create a new column 'outlier' that is True where the row is an outlier and False otherwise\ndf_pit_stops['outlier'] = ~filter\n\n# Plot the 'milliseconds' column, coloring by the 'outlier' column\nplt.figure(figsize=(10, 6))\nplt.scatter(df_pit_stops.index, df_pit_stops['milliseconds'], c=df_pit_stops['outlier'])\nplt.title('Outliers in Pit Stop Times')\nplt.xlabel('Index')\nplt.ylabel('Milliseconds')\nplt.show()\n\n# Todo: Lap times acc to drivers","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:13.484714Z","iopub.execute_input":"2024-04-23T06:39:13.485080Z","iopub.status.idle":"2024-04-23T06:39:14.077889Z","shell.execute_reply.started":"2024-04-23T06:39:13.485050Z","shell.execute_reply":"2024-04-23T06:39:14.076591Z"},"trusted":true},"execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# Removing pit stop times above 10 minutes\n\ndf_pit_stops = df_pit_stops[df_pit_stops['milliseconds'] < 500000]","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:14.079545Z","iopub.execute_input":"2024-04-23T06:39:14.079861Z","iopub.status.idle":"2024-04-23T06:39:14.088354Z","shell.execute_reply.started":"2024-04-23T06:39:14.079834Z","shell.execute_reply":"2024-04-23T06:39:14.087497Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"# Qualifying\ndf_qualifying\n\n# Converting q1, q2, q3 into milliseconds\ndef convert_to_seconds(time_str):\n    if pd.isnull(time_str):\n        return np.nan\n    minutes, seconds = time_str.split(':')\n    total_seconds = int(minutes) * 60 + float(seconds)\n    return total_seconds\n\ncolumns = ['q1', 'q2', 'q3']\n\nfor column in columns:\n    df_qualifying[column] = df_qualifying[column].replace('\\\\N', np.nan)\n    df_qualifying[column] = df_qualifying[column].apply(convert_to_seconds)\n\n# Storing the average of q1, q2, q3 in time column\ndf_qualifying['Qualifying Time'] = df_qualifying[['q1', 'q2', 'q3']].mean(axis=1).round(3)\n\n# Time converted from M:S.ms to ms\n# Averaged the 3 columns q1, q2, q3 to get qualifying time","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:14.089848Z","iopub.execute_input":"2024-04-23T06:39:14.090283Z","iopub.status.idle":"2024-04-23T06:39:14.297048Z","shell.execute_reply.started":"2024-04-23T06:39:14.090246Z","shell.execute_reply":"2024-04-23T06:39:14.295721Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"# Results\ndf_results\n\ndf_results['position'] = df_results['position'].replace('\\\\N', 0)\ndf_results['milliseconds'] = df_results['milliseconds'].replace('\\\\N', 0)\ndf_results['fastestLapTime'] = df_results['fastestLapTime'].replace('\\\\N', 0)\ndf_results['fastestLapSpeed'] = df_results['fastestLapSpeed'].replace('\\\\N', 0)\n\n\ndf_results['position'] = df_results['position'].astype(int)\ndf_results['milliseconds'] = df_results['milliseconds'].astype(float)\ndf_results['fastestLapSpeed'] = df_results['fastestLapSpeed'].astype(float)\n\n\ndf_results['milliseconds'] = df_results['milliseconds'] / 1000\ndf_results = df_results.rename(columns={'milliseconds': 'seconds'})\n\ndf_results = df_results.merge(df_races[['raceId', 'date', 'circuitId']], on='raceId')\n# Time converted from M:S.ms to ms\n# Dates added","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:14.298573Z","iopub.execute_input":"2024-04-23T06:39:14.298975Z","iopub.status.idle":"2024-04-23T06:39:14.361044Z","shell.execute_reply.started":"2024-04-23T06:39:14.298940Z","shell.execute_reply":"2024-04-23T06:39:14.360152Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"# Sprint Results\ndf_sprint_results\n\ndf_sprint_results['fastestLapTime'] = df_sprint_results['fastestLapTime'].replace('\\\\N', np.nan)\n\ndf_sprint_results = df_sprint_results.merge(df_races[['raceId', 'date']], on='raceId')\n\n# Time converted from M:S.ms to ms\n# Dates added","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:14.362355Z","iopub.execute_input":"2024-04-23T06:39:14.363776Z","iopub.status.idle":"2024-04-23T06:39:14.377245Z","shell.execute_reply.started":"2024-04-23T06:39:14.363733Z","shell.execute_reply":"2024-04-23T06:39:14.376205Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"# Weather\ndf_weather\n\ndf_weather.drop(columns='Time', inplace=True)\n\n# Function to get store Round Year-wise and calculate average\ndef weatherAverage(df_weather, year):\n    df_year = df_weather[df_weather['Year'] == year]\n    df_weather = df_weather[df_weather['Year'] != year]\n    rainfall = df_weather['Rainfall']\n    df_year = df_year.groupby('Round Number').mean().round(1).reset_index()\n    \n    df_weather = pd.concat([df_weather, df_year])\n    return df_weather\n\nyears = [x for x in range(2018, 2024)]\n\nfor year in years:\n    df_weather = weatherAverage(df_weather, year)\n\n# Now I'll add the circuitId and RaceId for to the weather dataset\ndf_weather = df_weather.rename(columns={\"Year\": \"year\", \"Round Number\": \"round\"})\ndf_weather = pd.merge(df_weather, df_races[['raceId', 'circuitId', 'year', 'round']], on=['year', 'round'], how='left')","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:14.379695Z","iopub.execute_input":"2024-04-23T06:39:14.381229Z","iopub.status.idle":"2024-04-23T06:39:14.468737Z","shell.execute_reply.started":"2024-04-23T06:39:14.381183Z","shell.execute_reply":"2024-04-23T06:39:14.467210Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"markdown","source":"# Exploratory Data Analysis (EDA)\nExplore the data to understand the patterns, trends, and relationships. Use visualizations to help understand the data better. This step might give you insights that could help refine your problem statement or generate new hypotheses.","metadata":{}},{"cell_type":"markdown","source":"Current Hypothesis: Viewing the entire formula 1 as a whole (since 1980). Creating a general model for each circuit. (Might highly genralize some races)\nWill be working on this. Then move on to next phase.\n\n(There is another concern over the period that should be covered. More years mean more data, but is that data significant for current F1 era? \nThoughts: Most likely not, Races from 1950-1980 were very different than what are today. So which for the current era of Formula I would like to start from 1980s for now.\nBut after the first iteration of model using data from 1980s. I can change the era (2000-2005, 2006-2008, 2009-2013, 2014-2021 (mercedes!), 2022-present)\n\n- There is also a connection between the winner and era. The Mercedes Era was from 2014 to 2020. Now it's Red Bull, before it was Ferrari during 2000s. So it changes according to the new regulations and specifications. New Regulation will come at 2026 (which could mean Red Bull no longer in the run for championship!)\n\nNext Hypothesis: Train model for individual circuits rather than a whole season. (Could introduce noise)\n\nPossible Fix: Using both models. Figure out which model works better for which circuit. For an average circuit, the general model should perform better. But for unique circuits like Manaco, or Las Vegas the Model for individual circuit should perform better","metadata":{}},{"cell_type":"code","source":"# Circuits\nimport folium\n\n# Create a Map instance\nm = folium.Map(location=[20, 0], zoom_start=2)\n\nfor idx, row in df_circuits.iterrows():\n    # Place marker for each circuit\n    folium.Marker([row['lat'], row['lng']], popup=f\"{row['location']}, {row['country']}\").add_to(m)\n\n# Show the map\nm","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:14.470812Z","iopub.execute_input":"2024-04-23T06:39:14.474651Z","iopub.status.idle":"2024-04-23T06:39:14.981661Z","shell.execute_reply.started":"2024-04-23T06:39:14.474591Z","shell.execute_reply":"2024-04-23T06:39:14.980242Z"},"trusted":true},"execution_count":18,"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"<folium.folium.Map at 0x781a16765ff0>","text/html":"<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe srcdoc=\"&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    \n    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;\n    \n        &lt;script&gt;\n            L_NO_TOUCH = false;\n            L_DISABLE_3D = false;\n        &lt;/script&gt;\n    \n    &lt;style&gt;html, body {width: 100%;height: 100%;margin: 0;padding: 0;}&lt;/style&gt;\n    &lt;style&gt;#map {position:absolute;top:0;bottom:0;right:0;left:0;}&lt;/style&gt;\n    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;&gt;&lt;/script&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/&gt;\n    \n            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,\n                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; /&gt;\n            &lt;style&gt;\n                #map_805c9ffd8f8a412d9ca6ba9c419772d8 {\n                    position: relative;\n                    width: 100.0%;\n                    height: 100.0%;\n                    left: 0.0%;\n                    top: 0.0%;\n                }\n                .leaflet-container { font-size: 1rem; }\n            &lt;/style&gt;\n        \n&lt;/head&gt;\n&lt;body&gt;\n    \n    \n            &lt;div class=&quot;folium-map&quot; id=&quot;map_805c9ffd8f8a412d9ca6ba9c419772d8&quot; &gt;&lt;/div&gt;\n        \n&lt;/body&gt;\n&lt;script&gt;\n    \n    \n            var map_805c9ffd8f8a412d9ca6ba9c419772d8 = L.map(\n                &quot;map_805c9ffd8f8a412d9ca6ba9c419772d8&quot;,\n                {\n                    center: [20.0, 0.0],\n                    crs: L.CRS.EPSG3857,\n                    zoom: 2,\n                    zoomControl: true,\n                    preferCanvas: false,\n                }\n            );\n\n            \n\n        \n    \n            var tile_layer_4c9088a82e5d156759a317f6a8597910 = L.tileLayer(\n                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,\n                {&quot;attribution&quot;: &quot;\\u0026copy; \\u003ca href=\\&quot;https://www.openstreetmap.org/copyright\\&quot;\\u003eOpenStreetMap\\u003c/a\\u003e contributors&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 19, &quot;maxZoom&quot;: 19, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}\n            );\n        \n    \n            tile_layer_4c9088a82e5d156759a317f6a8597910.addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n            var marker_07a1d86bece342fce4740d011b51c1a0 = L.marker(\n                [-37.8497, 144.968],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_d44a1fd29ba25a91b68f132e3b1ab47d = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_74af22f5f311b592a1fb2ebc6998cb2b = $(`&lt;div id=&quot;html_74af22f5f311b592a1fb2ebc6998cb2b&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Melbourne, Australia&lt;/div&gt;`)[0];\n                popup_d44a1fd29ba25a91b68f132e3b1ab47d.setContent(html_74af22f5f311b592a1fb2ebc6998cb2b);\n            \n        \n\n        marker_07a1d86bece342fce4740d011b51c1a0.bindPopup(popup_d44a1fd29ba25a91b68f132e3b1ab47d)\n        ;\n\n        \n    \n    \n            var marker_59a84011d644251f11334bd170ad22fe = L.marker(\n                [2.76083, 101.738],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_ab3ba4fc0f08a79c35c290e331143f9a = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_a42bac93cc0f8f73befea8303cc80884 = $(`&lt;div id=&quot;html_a42bac93cc0f8f73befea8303cc80884&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Kuala Lumpur, Malaysia&lt;/div&gt;`)[0];\n                popup_ab3ba4fc0f08a79c35c290e331143f9a.setContent(html_a42bac93cc0f8f73befea8303cc80884);\n            \n        \n\n        marker_59a84011d644251f11334bd170ad22fe.bindPopup(popup_ab3ba4fc0f08a79c35c290e331143f9a)\n        ;\n\n        \n    \n    \n            var marker_145e9c455169b1c7d9e0db46324d32b2 = L.marker(\n                [26.0325, 50.5106],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_ba7e258f472a79cfaa9756b161db8764 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_dadbba60cf9c5b397b5777bba3e81456 = $(`&lt;div id=&quot;html_dadbba60cf9c5b397b5777bba3e81456&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Sakhir, Bahrain&lt;/div&gt;`)[0];\n                popup_ba7e258f472a79cfaa9756b161db8764.setContent(html_dadbba60cf9c5b397b5777bba3e81456);\n            \n        \n\n        marker_145e9c455169b1c7d9e0db46324d32b2.bindPopup(popup_ba7e258f472a79cfaa9756b161db8764)\n        ;\n\n        \n    \n    \n            var marker_40fb1c388db76fe587af688df5750af0 = L.marker(\n                [41.57, 2.26111],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_ad74ae012c60ff92fc574e2673d65c92 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_ed39d3af70e844e42d79ae6065800cb1 = $(`&lt;div id=&quot;html_ed39d3af70e844e42d79ae6065800cb1&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Montmeló, Spain&lt;/div&gt;`)[0];\n                popup_ad74ae012c60ff92fc574e2673d65c92.setContent(html_ed39d3af70e844e42d79ae6065800cb1);\n            \n        \n\n        marker_40fb1c388db76fe587af688df5750af0.bindPopup(popup_ad74ae012c60ff92fc574e2673d65c92)\n        ;\n\n        \n    \n    \n            var marker_d1b7f03050762ebb730ceea9daa172dd = L.marker(\n                [40.9517, 29.405],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_55b8ea7c5d74269d663c9b4410f604da = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_26d84f3eacc3ac40600a47ca8e60a5cc = $(`&lt;div id=&quot;html_26d84f3eacc3ac40600a47ca8e60a5cc&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Istanbul, Turkey&lt;/div&gt;`)[0];\n                popup_55b8ea7c5d74269d663c9b4410f604da.setContent(html_26d84f3eacc3ac40600a47ca8e60a5cc);\n            \n        \n\n        marker_d1b7f03050762ebb730ceea9daa172dd.bindPopup(popup_55b8ea7c5d74269d663c9b4410f604da)\n        ;\n\n        \n    \n    \n            var marker_a84c7afcb53897c02519b51ac683a829 = L.marker(\n                [43.7347, 7.42056],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_b68090047a4bd1813054bee0ebc0498a = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_7f0bd41b6a4815b8f6f76478b66c895c = $(`&lt;div id=&quot;html_7f0bd41b6a4815b8f6f76478b66c895c&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Monte-Carlo, Monaco&lt;/div&gt;`)[0];\n                popup_b68090047a4bd1813054bee0ebc0498a.setContent(html_7f0bd41b6a4815b8f6f76478b66c895c);\n            \n        \n\n        marker_a84c7afcb53897c02519b51ac683a829.bindPopup(popup_b68090047a4bd1813054bee0ebc0498a)\n        ;\n\n        \n    \n    \n            var marker_b6c95bc70eb59615167cd3f63dbb92dd = L.marker(\n                [45.5, -73.5228],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_43bb6084b9aeb49eeff1aab65ec9fb71 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_d5c3127a900a9354a1e57a66f10f33e6 = $(`&lt;div id=&quot;html_d5c3127a900a9354a1e57a66f10f33e6&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Montreal, Canada&lt;/div&gt;`)[0];\n                popup_43bb6084b9aeb49eeff1aab65ec9fb71.setContent(html_d5c3127a900a9354a1e57a66f10f33e6);\n            \n        \n\n        marker_b6c95bc70eb59615167cd3f63dbb92dd.bindPopup(popup_43bb6084b9aeb49eeff1aab65ec9fb71)\n        ;\n\n        \n    \n    \n            var marker_b779307927f9f1e9c40a36c29c31b01a = L.marker(\n                [46.8642, 3.16361],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_a7cfbbf99c0f5addd9f549f58f6459eb = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_2a6a4572f137b3f553267cae555f7fae = $(`&lt;div id=&quot;html_2a6a4572f137b3f553267cae555f7fae&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Magny Cours, France&lt;/div&gt;`)[0];\n                popup_a7cfbbf99c0f5addd9f549f58f6459eb.setContent(html_2a6a4572f137b3f553267cae555f7fae);\n            \n        \n\n        marker_b779307927f9f1e9c40a36c29c31b01a.bindPopup(popup_a7cfbbf99c0f5addd9f549f58f6459eb)\n        ;\n\n        \n    \n    \n            var marker_e9085da2ce5b319fcd241270c5973baa = L.marker(\n                [52.0786, -1.01694],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_b2bfb50a603678b90aae4d846bb9e740 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_31bf34845304f1a7929f4e34d3b2ca08 = $(`&lt;div id=&quot;html_31bf34845304f1a7929f4e34d3b2ca08&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Silverstone, UK&lt;/div&gt;`)[0];\n                popup_b2bfb50a603678b90aae4d846bb9e740.setContent(html_31bf34845304f1a7929f4e34d3b2ca08);\n            \n        \n\n        marker_e9085da2ce5b319fcd241270c5973baa.bindPopup(popup_b2bfb50a603678b90aae4d846bb9e740)\n        ;\n\n        \n    \n    \n            var marker_1e56f3da1e412a2b8f63a5ce8f76f17d = L.marker(\n                [49.3278, 8.56583],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_d4a8d340a2e90deefe20bf15a14d8b1e = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_7b5843ac540607dd700428d3e1c8d89b = $(`&lt;div id=&quot;html_7b5843ac540607dd700428d3e1c8d89b&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Hockenheim, Germany&lt;/div&gt;`)[0];\n                popup_d4a8d340a2e90deefe20bf15a14d8b1e.setContent(html_7b5843ac540607dd700428d3e1c8d89b);\n            \n        \n\n        marker_1e56f3da1e412a2b8f63a5ce8f76f17d.bindPopup(popup_d4a8d340a2e90deefe20bf15a14d8b1e)\n        ;\n\n        \n    \n    \n            var marker_390364d3d218fb748061e55ddeafa26f = L.marker(\n                [47.5789, 19.2486],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_e05eb3732fa3f92b736992674d4b524f = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_0f7a6d6c3cc389c627ee4bde2a78c0ff = $(`&lt;div id=&quot;html_0f7a6d6c3cc389c627ee4bde2a78c0ff&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Budapest, Hungary&lt;/div&gt;`)[0];\n                popup_e05eb3732fa3f92b736992674d4b524f.setContent(html_0f7a6d6c3cc389c627ee4bde2a78c0ff);\n            \n        \n\n        marker_390364d3d218fb748061e55ddeafa26f.bindPopup(popup_e05eb3732fa3f92b736992674d4b524f)\n        ;\n\n        \n    \n    \n            var marker_3f69d9e75261fc4c4c18062ffc3bd714 = L.marker(\n                [39.4589, -0.331667],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_6afa1f25274bf07b9fb710849e70d8ce = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_d6f9f84d6c25757e22e836c0fd19823a = $(`&lt;div id=&quot;html_d6f9f84d6c25757e22e836c0fd19823a&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Valencia, Spain&lt;/div&gt;`)[0];\n                popup_6afa1f25274bf07b9fb710849e70d8ce.setContent(html_d6f9f84d6c25757e22e836c0fd19823a);\n            \n        \n\n        marker_3f69d9e75261fc4c4c18062ffc3bd714.bindPopup(popup_6afa1f25274bf07b9fb710849e70d8ce)\n        ;\n\n        \n    \n    \n            var marker_f7bf095018dfebe681b339cdc869582d = L.marker(\n                [50.4372, 5.97139],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_028eaefe79eba45c35f4e8601370ba3d = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_498f45d783911b518688dd6c4dc6d8d7 = $(`&lt;div id=&quot;html_498f45d783911b518688dd6c4dc6d8d7&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Spa, Belgium&lt;/div&gt;`)[0];\n                popup_028eaefe79eba45c35f4e8601370ba3d.setContent(html_498f45d783911b518688dd6c4dc6d8d7);\n            \n        \n\n        marker_f7bf095018dfebe681b339cdc869582d.bindPopup(popup_028eaefe79eba45c35f4e8601370ba3d)\n        ;\n\n        \n    \n    \n            var marker_12cdeaf3ee138c69887878e1fdbf8103 = L.marker(\n                [45.6156, 9.28111],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_e00c9d74321c5516dd90181e2c11a719 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_5991e332d57a93d6587e3e12ca017c4a = $(`&lt;div id=&quot;html_5991e332d57a93d6587e3e12ca017c4a&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Monza, Italy&lt;/div&gt;`)[0];\n                popup_e00c9d74321c5516dd90181e2c11a719.setContent(html_5991e332d57a93d6587e3e12ca017c4a);\n            \n        \n\n        marker_12cdeaf3ee138c69887878e1fdbf8103.bindPopup(popup_e00c9d74321c5516dd90181e2c11a719)\n        ;\n\n        \n    \n    \n            var marker_fbbb10e87d9a9251c40e871c7c050e46 = L.marker(\n                [1.2914, 103.864],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_59ab9e5f6e445c88878e57db96daba59 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_0ecc716208cf0ca150e4375355086e02 = $(`&lt;div id=&quot;html_0ecc716208cf0ca150e4375355086e02&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Marina Bay, Singapore&lt;/div&gt;`)[0];\n                popup_59ab9e5f6e445c88878e57db96daba59.setContent(html_0ecc716208cf0ca150e4375355086e02);\n            \n        \n\n        marker_fbbb10e87d9a9251c40e871c7c050e46.bindPopup(popup_59ab9e5f6e445c88878e57db96daba59)\n        ;\n\n        \n    \n    \n            var marker_a1bd9fabc48691aa4a1f4e5ccf21fd4b = L.marker(\n                [35.3717, 138.927],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_c01c78a3003d51228742e7e6bd1b209d = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_2ed29b23e03810e589b4ee1a7183433f = $(`&lt;div id=&quot;html_2ed29b23e03810e589b4ee1a7183433f&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Oyama, Japan&lt;/div&gt;`)[0];\n                popup_c01c78a3003d51228742e7e6bd1b209d.setContent(html_2ed29b23e03810e589b4ee1a7183433f);\n            \n        \n\n        marker_a1bd9fabc48691aa4a1f4e5ccf21fd4b.bindPopup(popup_c01c78a3003d51228742e7e6bd1b209d)\n        ;\n\n        \n    \n    \n            var marker_63270c23e2205097684a92bc07438d7b = L.marker(\n                [31.3389, 121.22],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_3ac3cef2381627b298bbcb8fc83742f4 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_2fbe7c93b7f7025ac0fc011a426def66 = $(`&lt;div id=&quot;html_2fbe7c93b7f7025ac0fc011a426def66&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Shanghai, China&lt;/div&gt;`)[0];\n                popup_3ac3cef2381627b298bbcb8fc83742f4.setContent(html_2fbe7c93b7f7025ac0fc011a426def66);\n            \n        \n\n        marker_63270c23e2205097684a92bc07438d7b.bindPopup(popup_3ac3cef2381627b298bbcb8fc83742f4)\n        ;\n\n        \n    \n    \n            var marker_be5e34a0caa160df4c153d4a7a5e3224 = L.marker(\n                [-23.7036, -46.6997],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_c45b8df26c0369ab1e859667501e8c6a = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_313e9ed81728822f31c8314755e2b979 = $(`&lt;div id=&quot;html_313e9ed81728822f31c8314755e2b979&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;São Paulo, Brazil&lt;/div&gt;`)[0];\n                popup_c45b8df26c0369ab1e859667501e8c6a.setContent(html_313e9ed81728822f31c8314755e2b979);\n            \n        \n\n        marker_be5e34a0caa160df4c153d4a7a5e3224.bindPopup(popup_c45b8df26c0369ab1e859667501e8c6a)\n        ;\n\n        \n    \n    \n            var marker_9d1e45a6060037d10b325f6bb02d99d0 = L.marker(\n                [39.795, -86.2347],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_79996f069c599d7fea57e8b9e7d9aa94 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_6d6cc842acfb74883d7a5199172a8cdb = $(`&lt;div id=&quot;html_6d6cc842acfb74883d7a5199172a8cdb&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Indianapolis, USA&lt;/div&gt;`)[0];\n                popup_79996f069c599d7fea57e8b9e7d9aa94.setContent(html_6d6cc842acfb74883d7a5199172a8cdb);\n            \n        \n\n        marker_9d1e45a6060037d10b325f6bb02d99d0.bindPopup(popup_79996f069c599d7fea57e8b9e7d9aa94)\n        ;\n\n        \n    \n    \n            var marker_fe9cbfb4daa56991380fa02511df7545 = L.marker(\n                [50.3356, 6.9475],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_d9d59f06fe73ca5a80246dcf47046f2f = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_48313440a35850bc1ea9b0c5129d489a = $(`&lt;div id=&quot;html_48313440a35850bc1ea9b0c5129d489a&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Nürburg, Germany&lt;/div&gt;`)[0];\n                popup_d9d59f06fe73ca5a80246dcf47046f2f.setContent(html_48313440a35850bc1ea9b0c5129d489a);\n            \n        \n\n        marker_fe9cbfb4daa56991380fa02511df7545.bindPopup(popup_d9d59f06fe73ca5a80246dcf47046f2f)\n        ;\n\n        \n    \n    \n            var marker_e8cbd06e5abb4cc0c6cc7aa74637af31 = L.marker(\n                [44.3439, 11.7167],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_9a945a1f70f7af36decb5cb5d32ee859 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_805598847cc33da60ee4027872fe39ac = $(`&lt;div id=&quot;html_805598847cc33da60ee4027872fe39ac&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Imola, Italy&lt;/div&gt;`)[0];\n                popup_9a945a1f70f7af36decb5cb5d32ee859.setContent(html_805598847cc33da60ee4027872fe39ac);\n            \n        \n\n        marker_e8cbd06e5abb4cc0c6cc7aa74637af31.bindPopup(popup_9a945a1f70f7af36decb5cb5d32ee859)\n        ;\n\n        \n    \n    \n            var marker_3120adcf39b053decfafb6e2554360db = L.marker(\n                [34.8431, 136.541],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_019e35cdb63663908a11f010378a2d75 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_a3a1920f40e30430c78c59b8d7ccb770 = $(`&lt;div id=&quot;html_a3a1920f40e30430c78c59b8d7ccb770&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Suzuka, Japan&lt;/div&gt;`)[0];\n                popup_019e35cdb63663908a11f010378a2d75.setContent(html_a3a1920f40e30430c78c59b8d7ccb770);\n            \n        \n\n        marker_3120adcf39b053decfafb6e2554360db.bindPopup(popup_019e35cdb63663908a11f010378a2d75)\n        ;\n\n        \n    \n    \n            var marker_cb1fa528a7cf93c4b592abc64f7d7402 = L.marker(\n                [36.1147, -115.173],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_5b71bce41ed5b913968b5517916417ed = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_ce72bf952ac67cc13473fd12eb7c7fd0 = $(`&lt;div id=&quot;html_ce72bf952ac67cc13473fd12eb7c7fd0&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Las Vegas, United States&lt;/div&gt;`)[0];\n                popup_5b71bce41ed5b913968b5517916417ed.setContent(html_ce72bf952ac67cc13473fd12eb7c7fd0);\n            \n        \n\n        marker_cb1fa528a7cf93c4b592abc64f7d7402.bindPopup(popup_5b71bce41ed5b913968b5517916417ed)\n        ;\n\n        \n    \n    \n            var marker_14b9d468c41027dfd823ae8c817cc02c = L.marker(\n                [24.4672, 54.6031],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_c5925b696e8ce80b71dc183b037fc2c9 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_ed93e2809cd519f7b84c92a97effdbdc = $(`&lt;div id=&quot;html_ed93e2809cd519f7b84c92a97effdbdc&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Abu Dhabi, UAE&lt;/div&gt;`)[0];\n                popup_c5925b696e8ce80b71dc183b037fc2c9.setContent(html_ed93e2809cd519f7b84c92a97effdbdc);\n            \n        \n\n        marker_14b9d468c41027dfd823ae8c817cc02c.bindPopup(popup_c5925b696e8ce80b71dc183b037fc2c9)\n        ;\n\n        \n    \n    \n            var marker_cd0a49ef27f60ccc4646ed9bb8cef8a2 = L.marker(\n                [-34.6943, -58.4593],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_69760c0ecf83785e14a84aeb46449bb1 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_7c960e1b64c1f55dc123b72a73952525 = $(`&lt;div id=&quot;html_7c960e1b64c1f55dc123b72a73952525&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Buenos Aires, Argentina&lt;/div&gt;`)[0];\n                popup_69760c0ecf83785e14a84aeb46449bb1.setContent(html_7c960e1b64c1f55dc123b72a73952525);\n            \n        \n\n        marker_cd0a49ef27f60ccc4646ed9bb8cef8a2.bindPopup(popup_69760c0ecf83785e14a84aeb46449bb1)\n        ;\n\n        \n    \n    \n            var marker_1155f9da01e1594cf2a2a316f9600172 = L.marker(\n                [36.7083, -6.03417],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_d719e2183cf3cb815a220c9930d25535 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_18c36b030e8e2f61f605640fc8e1bcae = $(`&lt;div id=&quot;html_18c36b030e8e2f61f605640fc8e1bcae&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Jerez de la Frontera, Spain&lt;/div&gt;`)[0];\n                popup_d719e2183cf3cb815a220c9930d25535.setContent(html_18c36b030e8e2f61f605640fc8e1bcae);\n            \n        \n\n        marker_1155f9da01e1594cf2a2a316f9600172.bindPopup(popup_d719e2183cf3cb815a220c9930d25535)\n        ;\n\n        \n    \n    \n            var marker_94cadd816a99b33dbe6ce784874f2e1b = L.marker(\n                [38.7506, -9.39417],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_fb54e1934f60780839a90e9c16827dca = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_8f2ff365e4ed3ade78b90fece179d6f7 = $(`&lt;div id=&quot;html_8f2ff365e4ed3ade78b90fece179d6f7&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Estoril, Portugal&lt;/div&gt;`)[0];\n                popup_fb54e1934f60780839a90e9c16827dca.setContent(html_8f2ff365e4ed3ade78b90fece179d6f7);\n            \n        \n\n        marker_94cadd816a99b33dbe6ce784874f2e1b.bindPopup(popup_fb54e1934f60780839a90e9c16827dca)\n        ;\n\n        \n    \n    \n            var marker_d5e8e9d450dd1d74576ef3e168e45c19 = L.marker(\n                [34.915, 134.221],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_b5788093bef51481562a3ee1626889b6 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_a4bcd9df913aa128e63fdd092c7c8267 = $(`&lt;div id=&quot;html_a4bcd9df913aa128e63fdd092c7c8267&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Okayama, Japan&lt;/div&gt;`)[0];\n                popup_b5788093bef51481562a3ee1626889b6.setContent(html_a4bcd9df913aa128e63fdd092c7c8267);\n            \n        \n\n        marker_d5e8e9d450dd1d74576ef3e168e45c19.bindPopup(popup_b5788093bef51481562a3ee1626889b6)\n        ;\n\n        \n    \n    \n            var marker_941132a35d02c221f71f14678c492ef2 = L.marker(\n                [-34.9272, 138.617],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_e80510cf1f51098936153f77f8a9c9f7 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_5b74213db954799a4f048fad5a96112a = $(`&lt;div id=&quot;html_5b74213db954799a4f048fad5a96112a&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Adelaide, Australia&lt;/div&gt;`)[0];\n                popup_e80510cf1f51098936153f77f8a9c9f7.setContent(html_5b74213db954799a4f048fad5a96112a);\n            \n        \n\n        marker_941132a35d02c221f71f14678c492ef2.bindPopup(popup_e80510cf1f51098936153f77f8a9c9f7)\n        ;\n\n        \n    \n    \n            var marker_40f57ac84ff93262bcc576ad5df4a6a0 = L.marker(\n                [-25.9894, 28.0767],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_77106b25336f24393ffcbb7480d9b942 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_a52c750e357e59b884126a1a993a6d8b = $(`&lt;div id=&quot;html_a52c750e357e59b884126a1a993a6d8b&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Midrand, South Africa&lt;/div&gt;`)[0];\n                popup_77106b25336f24393ffcbb7480d9b942.setContent(html_a52c750e357e59b884126a1a993a6d8b);\n            \n        \n\n        marker_40f57ac84ff93262bcc576ad5df4a6a0.bindPopup(popup_77106b25336f24393ffcbb7480d9b942)\n        ;\n\n        \n    \n    \n            var marker_6b92125d01cd60fba73a4595d26f2339 = L.marker(\n                [52.8306, -1.37528],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_e5f483feae298ae1dbce0a96bd831bf9 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_7f139d322bfeddf6089acd23b2197b63 = $(`&lt;div id=&quot;html_7f139d322bfeddf6089acd23b2197b63&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Castle Donington, UK&lt;/div&gt;`)[0];\n                popup_e5f483feae298ae1dbce0a96bd831bf9.setContent(html_7f139d322bfeddf6089acd23b2197b63);\n            \n        \n\n        marker_6b92125d01cd60fba73a4595d26f2339.bindPopup(popup_e5f483feae298ae1dbce0a96bd831bf9)\n        ;\n\n        \n    \n    \n            var marker_263f3b20d83ef5caa3062b9384158524 = L.marker(\n                [19.4042, -99.0907],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_82d54febd883dcc76188aa533ee56cd1 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_aeda1832cf8adcc01edb56b5b3704d5f = $(`&lt;div id=&quot;html_aeda1832cf8adcc01edb56b5b3704d5f&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Mexico City, Mexico&lt;/div&gt;`)[0];\n                popup_82d54febd883dcc76188aa533ee56cd1.setContent(html_aeda1832cf8adcc01edb56b5b3704d5f);\n            \n        \n\n        marker_263f3b20d83ef5caa3062b9384158524.bindPopup(popup_82d54febd883dcc76188aa533ee56cd1)\n        ;\n\n        \n    \n    \n            var marker_947895fb63196067ebdc3825986e5fed = L.marker(\n                [33.4479, -112.075],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_02f5afe8afeeb899f2cdb17068e246a2 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_faa96be3b2aeee2581af02d474f2854d = $(`&lt;div id=&quot;html_faa96be3b2aeee2581af02d474f2854d&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Phoenix, USA&lt;/div&gt;`)[0];\n                popup_02f5afe8afeeb899f2cdb17068e246a2.setContent(html_faa96be3b2aeee2581af02d474f2854d);\n            \n        \n\n        marker_947895fb63196067ebdc3825986e5fed.bindPopup(popup_02f5afe8afeeb899f2cdb17068e246a2)\n        ;\n\n        \n    \n    \n            var marker_996da53288587852374576fdb6ee39f0 = L.marker(\n                [43.2506, 5.79167],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_1fc98913c33bac768e37974b2c97c364 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_c17dafd1e707d20daa0abbc89515af7f = $(`&lt;div id=&quot;html_c17dafd1e707d20daa0abbc89515af7f&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Le Castellet, France&lt;/div&gt;`)[0];\n                popup_1fc98913c33bac768e37974b2c97c364.setContent(html_c17dafd1e707d20daa0abbc89515af7f);\n            \n        \n\n        marker_996da53288587852374576fdb6ee39f0.bindPopup(popup_1fc98913c33bac768e37974b2c97c364)\n        ;\n\n        \n    \n    \n            var marker_20f5038687f660fd8963010fc3a37225 = L.marker(\n                [34.7333, 126.417],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_3e637604b6546905cf4f2b9821d63b4f = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_5b1502ecc66fc1f38a072dcf13f70cee = $(`&lt;div id=&quot;html_5b1502ecc66fc1f38a072dcf13f70cee&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Yeongam County, Korea&lt;/div&gt;`)[0];\n                popup_3e637604b6546905cf4f2b9821d63b4f.setContent(html_5b1502ecc66fc1f38a072dcf13f70cee);\n            \n        \n\n        marker_20f5038687f660fd8963010fc3a37225.bindPopup(popup_3e637604b6546905cf4f2b9821d63b4f)\n        ;\n\n        \n    \n    \n            var marker_0f1fdd5ccc7cda232eb8e18f8da5b0be = L.marker(\n                [-22.9756, -43.395],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_0a389b5fa543637417e431abadf1a817 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_13eea752ca1ef89d2c9cb3be9764a198 = $(`&lt;div id=&quot;html_13eea752ca1ef89d2c9cb3be9764a198&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Rio de Janeiro, Brazil&lt;/div&gt;`)[0];\n                popup_0a389b5fa543637417e431abadf1a817.setContent(html_13eea752ca1ef89d2c9cb3be9764a198);\n            \n        \n\n        marker_0f1fdd5ccc7cda232eb8e18f8da5b0be.bindPopup(popup_0a389b5fa543637417e431abadf1a817)\n        ;\n\n        \n    \n    \n            var marker_c899bfb381d7df650fd8dea7e5926082 = L.marker(\n                [42.3298, -83.0401],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_04a585e93723e2b597b21ed3b5bfbb7e = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_a62685720044dbf0c645684f13b76671 = $(`&lt;div id=&quot;html_a62685720044dbf0c645684f13b76671&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Detroit, USA&lt;/div&gt;`)[0];\n                popup_04a585e93723e2b597b21ed3b5bfbb7e.setContent(html_a62685720044dbf0c645684f13b76671);\n            \n        \n\n        marker_c899bfb381d7df650fd8dea7e5926082.bindPopup(popup_04a585e93723e2b597b21ed3b5bfbb7e)\n        ;\n\n        \n    \n    \n            var marker_31c1a8d270738829eef7e468fe6a8632 = L.marker(\n                [51.3569, 0.263056],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_9862ab719c578eccf8ea5202022fe2ae = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_5b63d6e346d248820425411f1b16395c = $(`&lt;div id=&quot;html_5b63d6e346d248820425411f1b16395c&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Kent, UK&lt;/div&gt;`)[0];\n                popup_9862ab719c578eccf8ea5202022fe2ae.setContent(html_5b63d6e346d248820425411f1b16395c);\n            \n        \n\n        marker_31c1a8d270738829eef7e468fe6a8632.bindPopup(popup_9862ab719c578eccf8ea5202022fe2ae)\n        ;\n\n        \n    \n    \n            var marker_fd02f7d9baa0aed29c78cc9870cbf732 = L.marker(\n                [52.3888, 4.54092],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_4cd5ea3bf3ebff52392a63d31f5dfb99 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_de90077a5c807b91dfecae798ebc6e93 = $(`&lt;div id=&quot;html_de90077a5c807b91dfecae798ebc6e93&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Zandvoort, Netherlands&lt;/div&gt;`)[0];\n                popup_4cd5ea3bf3ebff52392a63d31f5dfb99.setContent(html_de90077a5c807b91dfecae798ebc6e93);\n            \n        \n\n        marker_fd02f7d9baa0aed29c78cc9870cbf732.bindPopup(popup_4cd5ea3bf3ebff52392a63d31f5dfb99)\n        ;\n\n        \n    \n    \n            var marker_dad301c53793358092da24401903a4f0 = L.marker(\n                [50.9894, 5.25694],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_53f80c692e3967c99c9077eea3cef0b8 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_a951cea7ab9a9b45230b151f7bde4cf6 = $(`&lt;div id=&quot;html_a951cea7ab9a9b45230b151f7bde4cf6&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Heusden-Zolder, Belgium&lt;/div&gt;`)[0];\n                popup_53f80c692e3967c99c9077eea3cef0b8.setContent(html_a951cea7ab9a9b45230b151f7bde4cf6);\n            \n        \n\n        marker_dad301c53793358092da24401903a4f0.bindPopup(popup_53f80c692e3967c99c9077eea3cef0b8)\n        ;\n\n        \n    \n    \n            var marker_379ffe294308b6ce924b192b57f422e6 = L.marker(\n                [47.3625, 4.89913],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_4522f4a64a3b5db01eb9fc709481ef1b = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_58926552677162fdf80d50ded0fd54c7 = $(`&lt;div id=&quot;html_58926552677162fdf80d50ded0fd54c7&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Dijon, France&lt;/div&gt;`)[0];\n                popup_4522f4a64a3b5db01eb9fc709481ef1b.setContent(html_58926552677162fdf80d50ded0fd54c7);\n            \n        \n\n        marker_379ffe294308b6ce924b192b57f422e6.bindPopup(popup_4522f4a64a3b5db01eb9fc709481ef1b)\n        ;\n\n        \n    \n    \n            var marker_fdf8e9a50a7544266d359e1d87123f30 = L.marker(\n                [32.7774, -96.7587],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_4ca02011654e9fc739f39201b2c3b857 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_4eb4a403f953af52d2ec37e46b82352e = $(`&lt;div id=&quot;html_4eb4a403f953af52d2ec37e46b82352e&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Dallas, USA&lt;/div&gt;`)[0];\n                popup_4ca02011654e9fc739f39201b2c3b857.setContent(html_4eb4a403f953af52d2ec37e46b82352e);\n            \n        \n\n        marker_fdf8e9a50a7544266d359e1d87123f30.bindPopup(popup_4ca02011654e9fc739f39201b2c3b857)\n        ;\n\n        \n    \n    \n            var marker_a0ac62e3a5d36b88bd1c512af70369e9 = L.marker(\n                [33.7651, -118.189],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_c093f6413efc06f704fe802ffb3fa80a = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_cc7574ff6491e66463f99049fe181ce5 = $(`&lt;div id=&quot;html_cc7574ff6491e66463f99049fe181ce5&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;California, USA&lt;/div&gt;`)[0];\n                popup_c093f6413efc06f704fe802ffb3fa80a.setContent(html_cc7574ff6491e66463f99049fe181ce5);\n            \n        \n\n        marker_a0ac62e3a5d36b88bd1c512af70369e9.bindPopup(popup_c093f6413efc06f704fe802ffb3fa80a)\n        ;\n\n        \n    \n    \n            var marker_c0aac7ccf234ed0d70db64deca10ca91 = L.marker(\n                [36.1162, -115.174],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_02a2c86c220a4b638f9edcaac12fec9c = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_d1bc4a48920e48708d7fb9be84af99c9 = $(`&lt;div id=&quot;html_d1bc4a48920e48708d7fb9be84af99c9&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Nevada, USA&lt;/div&gt;`)[0];\n                popup_02a2c86c220a4b638f9edcaac12fec9c.setContent(html_d1bc4a48920e48708d7fb9be84af99c9);\n            \n        \n\n        marker_c0aac7ccf234ed0d70db64deca10ca91.bindPopup(popup_02a2c86c220a4b638f9edcaac12fec9c)\n        ;\n\n        \n    \n    \n            var marker_1021eb84061f32d0bee5e0e4ef9e8a4b = L.marker(\n                [40.6171, -3.58558],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_2353f1571066664f2c70504da7a9c7c0 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_482c3961fa48aa5df394e79dad0c53a8 = $(`&lt;div id=&quot;html_482c3961fa48aa5df394e79dad0c53a8&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Madrid, Spain&lt;/div&gt;`)[0];\n                popup_2353f1571066664f2c70504da7a9c7c0.setContent(html_482c3961fa48aa5df394e79dad0c53a8);\n            \n        \n\n        marker_1021eb84061f32d0bee5e0e4ef9e8a4b.bindPopup(popup_2353f1571066664f2c70504da7a9c7c0)\n        ;\n\n        \n    \n    \n            var marker_c2668a8af1ca2b0a06cececc44d50c9f = L.marker(\n                [42.3369, -76.9272],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_d7bf2574d9e941b60fe28a76cca5397a = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_7fd4db26b275e95426ca82e0a79ed4bc = $(`&lt;div id=&quot;html_7fd4db26b275e95426ca82e0a79ed4bc&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;New York State, USA&lt;/div&gt;`)[0];\n                popup_d7bf2574d9e941b60fe28a76cca5397a.setContent(html_7fd4db26b275e95426ca82e0a79ed4bc);\n            \n        \n\n        marker_c2668a8af1ca2b0a06cececc44d50c9f.bindPopup(popup_d7bf2574d9e941b60fe28a76cca5397a)\n        ;\n\n        \n    \n    \n            var marker_d24474aad9602e3c44b918739088f4d9 = L.marker(\n                [57.2653, 13.6042],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_9c7eb29b8007069141c28b854b529048 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_88708fed484a365fc4d6bd02b221e339 = $(`&lt;div id=&quot;html_88708fed484a365fc4d6bd02b221e339&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Anderstorp, Sweden&lt;/div&gt;`)[0];\n                popup_9c7eb29b8007069141c28b854b529048.setContent(html_88708fed484a365fc4d6bd02b221e339);\n            \n        \n\n        marker_d24474aad9602e3c44b918739088f4d9.bindPopup(popup_9c7eb29b8007069141c28b854b529048)\n        ;\n\n        \n    \n    \n            var marker_02e59fe883691e0b2a9d89faf7b835d3 = L.marker(\n                [44.0481, -78.6756],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_d5e3886ce4e4f29ca3503cd9d4671ce8 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_2f9ec3b874378a741e767632793dfa48 = $(`&lt;div id=&quot;html_2f9ec3b874378a741e767632793dfa48&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Ontario, Canada&lt;/div&gt;`)[0];\n                popup_d5e3886ce4e4f29ca3503cd9d4671ce8.setContent(html_2f9ec3b874378a741e767632793dfa48);\n            \n        \n\n        marker_02e59fe883691e0b2a9d89faf7b835d3.bindPopup(popup_d5e3886ce4e4f29ca3503cd9d4671ce8)\n        ;\n\n        \n    \n    \n            var marker_f00f2386c6cc4723afc8ec1f8d56ab9b = L.marker(\n                [41.3664, 2.15167],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_6aa9bea9d9d56585693a590343f342a0 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_a4eff05ebb22588fd239590d7f73bb45 = $(`&lt;div id=&quot;html_a4eff05ebb22588fd239590d7f73bb45&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Barcelona, Spain&lt;/div&gt;`)[0];\n                popup_6aa9bea9d9d56585693a590343f342a0.setContent(html_a4eff05ebb22588fd239590d7f73bb45);\n            \n        \n\n        marker_f00f2386c6cc4723afc8ec1f8d56ab9b.bindPopup(popup_6aa9bea9d9d56585693a590343f342a0)\n        ;\n\n        \n    \n    \n            var marker_e3189c9238e8d96532810ee0c44233eb = L.marker(\n                [50.6211, 4.32694],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_d5cc466acc821c51b27674c33c12143d = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_ba2f4c9b3876836a74c829999cd9cb44 = $(`&lt;div id=&quot;html_ba2f4c9b3876836a74c829999cd9cb44&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Brussels, Belgium&lt;/div&gt;`)[0];\n                popup_d5cc466acc821c51b27674c33c12143d.setContent(html_ba2f4c9b3876836a74c829999cd9cb44);\n            \n        \n\n        marker_e3189c9238e8d96532810ee0c44233eb.bindPopup(popup_d5cc466acc821c51b27674c33c12143d)\n        ;\n\n        \n    \n    \n            var marker_7a25e50f388b4cba92c79b90b51bf384 = L.marker(\n                [45.7472, 3.03889],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_b6fcf8c214f9267a800d02df58bf92c7 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_6883e3b95896b78387e1c3aa48408c53 = $(`&lt;div id=&quot;html_6883e3b95896b78387e1c3aa48408c53&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Clermont-Ferrand, France&lt;/div&gt;`)[0];\n                popup_b6fcf8c214f9267a800d02df58bf92c7.setContent(html_6883e3b95896b78387e1c3aa48408c53);\n            \n        \n\n        marker_7a25e50f388b4cba92c79b90b51bf384.bindPopup(popup_b6fcf8c214f9267a800d02df58bf92c7)\n        ;\n\n        \n    \n    \n            var marker_807ba0abbc5d13a06342405a6b162c32 = L.marker(\n                [46.1877, -74.6099],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_acca114f174510696295d13b49329aa8 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_49c0f245170adaa4b66cbd42821d09f2 = $(`&lt;div id=&quot;html_49c0f245170adaa4b66cbd42821d09f2&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Quebec, Canada&lt;/div&gt;`)[0];\n                popup_acca114f174510696295d13b49329aa8.setContent(html_49c0f245170adaa4b66cbd42821d09f2);\n            \n        \n\n        marker_807ba0abbc5d13a06342405a6b162c32.bindPopup(popup_acca114f174510696295d13b49329aa8)\n        ;\n\n        \n    \n    \n            var marker_a000f2ddfa481b75636d4652210ea712 = L.marker(\n                [49.3306, 1.00458],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_c6c890f2d4dc358b1539e30b32038658 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_ead52d1d05b63567d37397034bee18ce = $(`&lt;div id=&quot;html_ead52d1d05b63567d37397034bee18ce&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Rouen, France&lt;/div&gt;`)[0];\n                popup_c6c890f2d4dc358b1539e30b32038658.setContent(html_ead52d1d05b63567d37397034bee18ce);\n            \n        \n\n        marker_a000f2ddfa481b75636d4652210ea712.bindPopup(popup_c6c890f2d4dc358b1539e30b32038658)\n        ;\n\n        \n    \n    \n            var marker_96c720f59393b933a179ceec94285ca6 = L.marker(\n                [47.95, 0.224231],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_31317aa0c64cb6699966ed325c4c17e5 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_e5bf4467fb5d3964a1a86c3429734732 = $(`&lt;div id=&quot;html_e5bf4467fb5d3964a1a86c3429734732&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Le Mans, France&lt;/div&gt;`)[0];\n                popup_31317aa0c64cb6699966ed325c4c17e5.setContent(html_e5bf4467fb5d3964a1a86c3429734732);\n            \n        \n\n        marker_96c720f59393b933a179ceec94285ca6.bindPopup(popup_31317aa0c64cb6699966ed325c4c17e5)\n        ;\n\n        \n    \n    \n            var marker_d6f9468efe86739f462870e04def9302 = L.marker(\n                [49.2542, 3.93083],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_56dad2ce8ad07517e906ddee0118c4e4 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_87c3a08a7b60a86bb266c7574f59576d = $(`&lt;div id=&quot;html_87c3a08a7b60a86bb266c7574f59576d&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Reims, France&lt;/div&gt;`)[0];\n                popup_56dad2ce8ad07517e906ddee0118c4e4.setContent(html_87c3a08a7b60a86bb266c7574f59576d);\n            \n        \n\n        marker_d6f9468efe86739f462870e04def9302.bindPopup(popup_56dad2ce8ad07517e906ddee0118c4e4)\n        ;\n\n        \n    \n    \n            var marker_6de38e66f440e7cbd5c8ec94d78b8b10 = L.marker(\n                [-33.0486, 27.8736],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_29a19e69a4ccf3f1338105cc037dcb70 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_5a52ef14ae3a99cf282b7b21fd155ea7 = $(`&lt;div id=&quot;html_5a52ef14ae3a99cf282b7b21fd155ea7&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Eastern Cape Province, South Africa&lt;/div&gt;`)[0];\n                popup_29a19e69a4ccf3f1338105cc037dcb70.setContent(html_5a52ef14ae3a99cf282b7b21fd155ea7);\n            \n        \n\n        marker_6de38e66f440e7cbd5c8ec94d78b8b10.bindPopup(popup_29a19e69a4ccf3f1338105cc037dcb70)\n        ;\n\n        \n    \n    \n            var marker_07702a6c71ce48681fa443f58fed88c0 = L.marker(\n                [47.2039, 14.7478],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_c0288ccdc45f192e542c7f4182edf98d = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_729fc6d76de58d34a212ee5646d7cbdf = $(`&lt;div id=&quot;html_729fc6d76de58d34a212ee5646d7cbdf&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Styria, Austria&lt;/div&gt;`)[0];\n                popup_c0288ccdc45f192e542c7f4182edf98d.setContent(html_729fc6d76de58d34a212ee5646d7cbdf);\n            \n        \n\n        marker_07702a6c71ce48681fa443f58fed88c0.bindPopup(popup_c0288ccdc45f192e542c7f4182edf98d)\n        ;\n\n        \n    \n    \n            var marker_991b4785365b41b513bc5c5cec71831c = L.marker(\n                [53.4769, -2.94056],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_af6f468906eae1b9bbde65044c01e1f3 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_8e02b70e4097d6805f057c6ee8cd897b = $(`&lt;div id=&quot;html_8e02b70e4097d6805f057c6ee8cd897b&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Liverpool, UK&lt;/div&gt;`)[0];\n                popup_af6f468906eae1b9bbde65044c01e1f3.setContent(html_8e02b70e4097d6805f057c6ee8cd897b);\n            \n        \n\n        marker_991b4785365b41b513bc5c5cec71831c.bindPopup(popup_af6f468906eae1b9bbde65044c01e1f3)\n        ;\n\n        \n    \n    \n            var marker_e330fc5aab4bd706c45dc1141a3ac9e8 = L.marker(\n                [41.1705, -8.67325],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_8c73f9ea407b5d9764808c0ada9d8271 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_34e307ded760fc7b663d529582867c7b = $(`&lt;div id=&quot;html_34e307ded760fc7b663d529582867c7b&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Oporto, Portugal&lt;/div&gt;`)[0];\n                popup_8c73f9ea407b5d9764808c0ada9d8271.setContent(html_34e307ded760fc7b663d529582867c7b);\n            \n        \n\n        marker_e330fc5aab4bd706c45dc1141a3ac9e8.bindPopup(popup_8c73f9ea407b5d9764808c0ada9d8271)\n        ;\n\n        \n    \n    \n            var marker_ccfca4666e0ff96860aea866d7f96c3e = L.marker(\n                [33.937, -117.273],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_940f7af88aad6252c799b5a2ddda8ca1 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_ec758038fe7a93348064d539b95e9324 = $(`&lt;div id=&quot;html_ec758038fe7a93348064d539b95e9324&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;California, USA&lt;/div&gt;`)[0];\n                popup_940f7af88aad6252c799b5a2ddda8ca1.setContent(html_ec758038fe7a93348064d539b95e9324);\n            \n        \n\n        marker_ccfca4666e0ff96860aea866d7f96c3e.bindPopup(popup_940f7af88aad6252c799b5a2ddda8ca1)\n        ;\n\n        \n    \n    \n            var marker_2e68e72229d668e726208628b9e7cd28 = L.marker(\n                [52.4806, 13.2514],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_1dc98248282b701b951c6c1c45865fa7 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_d49742c408aacf756664516d0e104c10 = $(`&lt;div id=&quot;html_d49742c408aacf756664516d0e104c10&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Berlin, Germany&lt;/div&gt;`)[0];\n                popup_1dc98248282b701b951c6c1c45865fa7.setContent(html_d49742c408aacf756664516d0e104c10);\n            \n        \n\n        marker_2e68e72229d668e726208628b9e7cd28.bindPopup(popup_1dc98248282b701b951c6c1c45865fa7)\n        ;\n\n        \n    \n    \n            var marker_93166f94ba7efdd76823917fc9f93b1b = L.marker(\n                [38.7197, -9.20306],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_c864867f340d08db9762436f70601aa9 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_467737985fca0da85f137441a30b7da3 = $(`&lt;div id=&quot;html_467737985fca0da85f137441a30b7da3&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Lisbon, Portugal&lt;/div&gt;`)[0];\n                popup_c864867f340d08db9762436f70601aa9.setContent(html_467737985fca0da85f137441a30b7da3);\n            \n        \n\n        marker_93166f94ba7efdd76823917fc9f93b1b.bindPopup(popup_c864867f340d08db9762436f70601aa9)\n        ;\n\n        \n    \n    \n            var marker_e6ac19db0d5221cfc9492eb480791988 = L.marker(\n                [27.4547, -81.3483],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_cc184a1564fb9bba9228e5e7188fe822 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_301e3750026d5fec62fe8463258a841d = $(`&lt;div id=&quot;html_301e3750026d5fec62fe8463258a841d&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Florida, USA&lt;/div&gt;`)[0];\n                popup_cc184a1564fb9bba9228e5e7188fe822.setContent(html_301e3750026d5fec62fe8463258a841d);\n            \n        \n\n        marker_e6ac19db0d5221cfc9492eb480791988.bindPopup(popup_cc184a1564fb9bba9228e5e7188fe822)\n        ;\n\n        \n    \n    \n            var marker_69e36cbd86b8ade4ee861b5233d65617 = L.marker(\n                [33.5786, -7.6875],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_37acce4407ade27251c209a98f0050ca = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_daca89b06426f75f13aab8bcefb2e9ce = $(`&lt;div id=&quot;html_daca89b06426f75f13aab8bcefb2e9ce&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Casablanca, Morocco&lt;/div&gt;`)[0];\n                popup_37acce4407ade27251c209a98f0050ca.setContent(html_daca89b06426f75f13aab8bcefb2e9ce);\n            \n        \n\n        marker_69e36cbd86b8ade4ee861b5233d65617.bindPopup(popup_37acce4407ade27251c209a98f0050ca)\n        ;\n\n        \n    \n    \n            var marker_9bfe8b20de87d19e3211f65b8fe93b26 = L.marker(\n                [42.475, 14.1508],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_5efde1b181fef75a1c1eacf259f922a7 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_7d40986a93ff46b42faa61be1a69f42e = $(`&lt;div id=&quot;html_7d40986a93ff46b42faa61be1a69f42e&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Pescara, Italy&lt;/div&gt;`)[0];\n                popup_5efde1b181fef75a1c1eacf259f922a7.setContent(html_7d40986a93ff46b42faa61be1a69f42e);\n            \n        \n\n        marker_9bfe8b20de87d19e3211f65b8fe93b26.bindPopup(popup_5efde1b181fef75a1c1eacf259f922a7)\n        ;\n\n        \n    \n    \n            var marker_579fc4a9e817ebdcb46f1e1940a82742 = L.marker(\n                [46.9589, 7.40194],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_30f18dbc9a56077d16af8bb51d23e861 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_5351ffd8cf4e4d3e66317f3722ce1088 = $(`&lt;div id=&quot;html_5351ffd8cf4e4d3e66317f3722ce1088&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Bern, Switzerland&lt;/div&gt;`)[0];\n                popup_30f18dbc9a56077d16af8bb51d23e861.setContent(html_5351ffd8cf4e4d3e66317f3722ce1088);\n            \n        \n\n        marker_579fc4a9e817ebdcb46f1e1940a82742.bindPopup(popup_30f18dbc9a56077d16af8bb51d23e861)\n        ;\n\n        \n    \n    \n            var marker_c798d6171b8511ffe25edc65bb8decdb = L.marker(\n                [41.3903, 2.11667],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_ad3a4383ccbf8ef308068bd729a86ee6 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_1add33f69636e2f1f0f57ca174b6c919 = $(`&lt;div id=&quot;html_1add33f69636e2f1f0f57ca174b6c919&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Barcelona, Spain&lt;/div&gt;`)[0];\n                popup_ad3a4383ccbf8ef308068bd729a86ee6.setContent(html_1add33f69636e2f1f0f57ca174b6c919);\n            \n        \n\n        marker_c798d6171b8511ffe25edc65bb8decdb.bindPopup(popup_ad3a4383ccbf8ef308068bd729a86ee6)\n        ;\n\n        \n    \n    \n            var marker_18c4048dc9523e01031110bf6f5f3e5c = L.marker(\n                [28.3487, 77.5331],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_9246a135daf5109957f1397c5c11f5df = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_93e2ad108af9da1df1a23dac89982ef8 = $(`&lt;div id=&quot;html_93e2ad108af9da1df1a23dac89982ef8&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Uttar Pradesh, India&lt;/div&gt;`)[0];\n                popup_9246a135daf5109957f1397c5c11f5df.setContent(html_93e2ad108af9da1df1a23dac89982ef8);\n            \n        \n\n        marker_18c4048dc9523e01031110bf6f5f3e5c.bindPopup(popup_9246a135daf5109957f1397c5c11f5df)\n        ;\n\n        \n    \n    \n            var marker_87c1fec9deefeda856478fd1a08dfb29 = L.marker(\n                [30.1328, -97.6411],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_3b1ceb3960813946684ebda37af56d4e = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_5342b3c37143d15f7fe8e6e514358d0a = $(`&lt;div id=&quot;html_5342b3c37143d15f7fe8e6e514358d0a&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Austin, USA&lt;/div&gt;`)[0];\n                popup_3b1ceb3960813946684ebda37af56d4e.setContent(html_5342b3c37143d15f7fe8e6e514358d0a);\n            \n        \n\n        marker_87c1fec9deefeda856478fd1a08dfb29.bindPopup(popup_3b1ceb3960813946684ebda37af56d4e)\n        ;\n\n        \n    \n    \n            var marker_47e4bce96a121c338a0cb28a8c8c59fc = L.marker(\n                [47.2197, 14.7647],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_083b7f0cfa1399ed9e8c3375af02c185 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_bc7a4d33493adb7da0baee6829e5ad9f = $(`&lt;div id=&quot;html_bc7a4d33493adb7da0baee6829e5ad9f&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Spielberg, Austria&lt;/div&gt;`)[0];\n                popup_083b7f0cfa1399ed9e8c3375af02c185.setContent(html_bc7a4d33493adb7da0baee6829e5ad9f);\n            \n        \n\n        marker_47e4bce96a121c338a0cb28a8c8c59fc.bindPopup(popup_083b7f0cfa1399ed9e8c3375af02c185)\n        ;\n\n        \n    \n    \n            var marker_84fabbd7ff6978a054dad6888d3826b2 = L.marker(\n                [43.4057, 39.9578],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_bd9f9d8bde7964d44f23b5cda73bc034 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_48bddb3864f4ebaac38434519405fe8c = $(`&lt;div id=&quot;html_48bddb3864f4ebaac38434519405fe8c&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Sochi, Russia&lt;/div&gt;`)[0];\n                popup_bd9f9d8bde7964d44f23b5cda73bc034.setContent(html_48bddb3864f4ebaac38434519405fe8c);\n            \n        \n\n        marker_84fabbd7ff6978a054dad6888d3826b2.bindPopup(popup_bd9f9d8bde7964d44f23b5cda73bc034)\n        ;\n\n        \n    \n    \n            var marker_24b69e51adff725e23dac74afa61d12c = L.marker(\n                [40.3725, 49.8533],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_fcc34f62669c1df2652e65b07aae83c1 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_a4e4991d51697fc9f5a1b8bccc59c426 = $(`&lt;div id=&quot;html_a4e4991d51697fc9f5a1b8bccc59c426&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Baku, Azerbaijan&lt;/div&gt;`)[0];\n                popup_fcc34f62669c1df2652e65b07aae83c1.setContent(html_a4e4991d51697fc9f5a1b8bccc59c426);\n            \n        \n\n        marker_24b69e51adff725e23dac74afa61d12c.bindPopup(popup_fcc34f62669c1df2652e65b07aae83c1)\n        ;\n\n        \n    \n    \n            var marker_4f28dacfe586118ff6824c3122df1ffa = L.marker(\n                [37.227, -8.6267],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_82deaf45c56c55a31badebd39c187fe3 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_a14169b77d58b04fa9633c5ca26f8f13 = $(`&lt;div id=&quot;html_a14169b77d58b04fa9633c5ca26f8f13&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Portimão, Portugal&lt;/div&gt;`)[0];\n                popup_82deaf45c56c55a31badebd39c187fe3.setContent(html_a14169b77d58b04fa9633c5ca26f8f13);\n            \n        \n\n        marker_4f28dacfe586118ff6824c3122df1ffa.bindPopup(popup_82deaf45c56c55a31badebd39c187fe3)\n        ;\n\n        \n    \n    \n            var marker_b6eadf5c2522b732a6fa93047e5d25bc = L.marker(\n                [43.9975, 11.3719],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_9ad7f7092cf386aac16f4063811b6f9d = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_3f62ea2b507a703b990872a8430d7a28 = $(`&lt;div id=&quot;html_3f62ea2b507a703b990872a8430d7a28&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Mugello, Italy&lt;/div&gt;`)[0];\n                popup_9ad7f7092cf386aac16f4063811b6f9d.setContent(html_3f62ea2b507a703b990872a8430d7a28);\n            \n        \n\n        marker_b6eadf5c2522b732a6fa93047e5d25bc.bindPopup(popup_9ad7f7092cf386aac16f4063811b6f9d)\n        ;\n\n        \n    \n    \n            var marker_6094ac0ef2aab9b4aa069ef8574defcb = L.marker(\n                [21.6319, 39.1044],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_fbd312f3770290595d9abfb0dfa3e090 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_7032fedb2bc49e989e936388968260e0 = $(`&lt;div id=&quot;html_7032fedb2bc49e989e936388968260e0&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Jeddah, Saudi Arabia&lt;/div&gt;`)[0];\n                popup_fbd312f3770290595d9abfb0dfa3e090.setContent(html_7032fedb2bc49e989e936388968260e0);\n            \n        \n\n        marker_6094ac0ef2aab9b4aa069ef8574defcb.bindPopup(popup_fbd312f3770290595d9abfb0dfa3e090)\n        ;\n\n        \n    \n    \n            var marker_f5c60ab2f198216ef947d17c8ccdafdb = L.marker(\n                [25.49, 51.4542],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_a0aa507d287a985fb3488a2f54784de7 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_9c79a163a1216886d8ba98a2d68c8c3d = $(`&lt;div id=&quot;html_9c79a163a1216886d8ba98a2d68c8c3d&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Al Daayen, Qatar&lt;/div&gt;`)[0];\n                popup_a0aa507d287a985fb3488a2f54784de7.setContent(html_9c79a163a1216886d8ba98a2d68c8c3d);\n            \n        \n\n        marker_f5c60ab2f198216ef947d17c8ccdafdb.bindPopup(popup_a0aa507d287a985fb3488a2f54784de7)\n        ;\n\n        \n    \n    \n            var marker_b825763cd693624e23bf0f8eeb3b3bb5 = L.marker(\n                [25.9581, -80.2389],\n                {}\n            ).addTo(map_805c9ffd8f8a412d9ca6ba9c419772d8);\n        \n    \n        var popup_ecb0cfca31aa973b0a050b33e67792e6 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_5acda5063729b79d820c4ce7a6b96e9e = $(`&lt;div id=&quot;html_5acda5063729b79d820c4ce7a6b96e9e&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Miami, USA&lt;/div&gt;`)[0];\n                popup_ecb0cfca31aa973b0a050b33e67792e6.setContent(html_5acda5063729b79d820c4ce7a6b96e9e);\n            \n        \n\n        marker_b825763cd693624e23bf0f8eeb3b3bb5.bindPopup(popup_ecb0cfca31aa973b0a050b33e67792e6)\n        ;\n\n        \n    \n&lt;/script&gt;\n&lt;/html&gt;\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### Hypothesis 1: Constructor Points vs Constructor Wins: Assuming more number of points scored by team leads to more number of wins.","metadata":{}},{"cell_type":"code","source":"df_constructor_points = df_constructor_standings.groupby('name')['points'].sum().sort_values(ascending=False).reset_index()\n\ndf_constructor_wins = df_constructor_standings[df_constructor_standings['position']==1].groupby('name').size().reset_index()\ndf_constructor_wins = df_constructor_wins.rename(columns={0: 'Wins'})\n\n#Plotting Graph\ndf = pd.merge(df_constructor_points, df_constructor_wins, on='name')\n\n# Create a Figure instance\nfig = go.Figure()\n\n# Add a line for each team\nfor team in df['name'].unique():\n    df_team = df[df['name'] == team]\n    fig.add_trace(go.Scatter(x=df_team['Wins'], y=df_team['points'], mode='lines+markers', name=team))\n\n# Update layout\nfig.update_layout(title_text='<b>Constructor Points vs Wins</b>', titlefont=dict(family='Arial, sans-serif', size=30), title_x=0.5, xaxis_title=\"Wins\", yaxis_title=\"Points\")\n\n# Show the plot\nfig.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:14.983278Z","iopub.execute_input":"2024-04-23T06:39:14.984829Z","iopub.status.idle":"2024-04-23T06:39:15.418036Z","shell.execute_reply.started":"2024-04-23T06:39:14.984789Z","shell.execute_reply":"2024-04-23T06:39:15.417203Z"},"trusted":true},"execution_count":19,"outputs":[{"output_type":"display_data","data":{"text/html":"        <script type=\"text/javascript\">\n        window.PlotlyConfig = {MathJaxConfig: 'local'};\n        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n        if (typeof require !== 'undefined') {\n        require.undef(\"plotly\");\n        requirejs.config({\n            paths: {\n                'plotly': ['https://cdn.plot.ly/plotly-2.27.0.min']\n            }\n        });\n        require(['plotly'], function(Plotly) {\n            window._Plotly = Plotly;\n        });\n        }\n        </script>\n        "},"metadata":{}},{"output_type":"display_data","data":{"text/html":"<div>                            <div id=\"518dc146-aa34-4f05-9222-10765ac65de3\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"518dc146-aa34-4f05-9222-10765ac65de3\")) {                    Plotly.newPlot(                        \"518dc146-aa34-4f05-9222-10765ac65de3\",                        [{\"mode\":\"lines+markers\",\"name\":\"Ferrari\",\"x\":[234],\"y\":[91389.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Mercedes\",\"x\":[145],\"y\":[73379.5],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Red Bull\",\"x\":[98],\"y\":[68243.5],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"McLaren\",\"x\":[165],\"y\":[57557.5],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Williams\",\"x\":[114],\"y\":[32147.5],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Renault\",\"x\":[46],\"y\":[17168.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Team Lotus\",\"x\":[44],\"y\":[7742.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Benetton\",\"x\":[29],\"y\":[7349.5],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Tyrrell\",\"x\":[16],\"y\":[5125.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Brabham\",\"x\":[6],\"y\":[4575.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Ligier\",\"x\":[4],\"y\":[3289.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"BMW Sauber\",\"x\":[1],\"y\":[2932.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"BRM\",\"x\":[14],\"y\":[2383.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Brawn\",\"x\":[17],\"y\":[1752.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Lotus-Climax\",\"x\":[23],\"y\":[1370.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Cooper-Climax\",\"x\":[20],\"y\":[1174.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Lotus-Ford\",\"x\":[12],\"y\":[1043.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"March\",\"x\":[3],\"y\":[1014.5],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Matra-Ford\",\"x\":[11],\"y\":[713.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Brabham-Repco\",\"x\":[16],\"y\":[696.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Wolf\",\"x\":[1],\"y\":[687.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Cooper-Maserati\",\"x\":[1],\"y\":[360.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Vanwall\",\"x\":[3],\"y\":[247.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Cooper\",\"x\":[4],\"y\":[243.0],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"title\":{\"font\":{\"family\":\"Arial, sans-serif\",\"size\":30},\"text\":\"\\u003cb\\u003eConstructor Points vs Wins\\u003c\\u002fb\\u003e\",\"x\":0.5},\"xaxis\":{\"title\":{\"text\":\"Wins\"}},\"yaxis\":{\"title\":{\"text\":\"Points\"}}},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('518dc146-aa34-4f05-9222-10765ac65de3');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>"},"metadata":{}}]},{"cell_type":"code","source":"# Correlation Factor\ncorrelation = df['points'].corr(df['Wins'])\nprint(correlation)","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:15.419497Z","iopub.execute_input":"2024-04-23T06:39:15.420505Z","iopub.status.idle":"2024-04-23T06:39:15.431339Z","shell.execute_reply.started":"2024-04-23T06:39:15.420466Z","shell.execute_reply":"2024-04-23T06:39:15.430003Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"0.9517134429999371\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Conclusion 1: This mean that 'No. of Points' and 'No. of Wins' have positive correlation.","metadata":{}},{"cell_type":"markdown","source":"### Hypothesis 2: Driver Points vs Driver Wins: Assuming more number of points scored by driver leads to more number of wins similar to constructors win\n","metadata":{}},{"cell_type":"code","source":"df_driver_points = df_driver_standings.groupby('Name')['points'].sum().sort_values(ascending=False).reset_index()\n\ndf_driver_wins = df_driver_standings[df_driver_standings['position']==1].groupby('Name').size().reset_index()\ndf_driver_wins = df_driver_wins.rename(columns={0: 'Wins'})\n\n#Plotting Graph\ndf = pd.merge(df_driver_points, df_driver_wins, on='Name')\n\n# Create a Figure instance\nfig = go.Figure()\n\n# Add a line for each team\nfor team in df['Name'].unique():\n    df_team = df[df['Name'] == team]\n    fig.add_trace(go.Scatter(x=df_team['Wins'], y=df_team['points'], mode='lines+markers', name=team))\n\n# Update layout\nfig.update_layout(title_text='<b>Driver Points vs Wins</b>', titlefont=dict(family='Arial, sans-serif', size=30), title_x=0.5, xaxis_title=\"Wins\", yaxis_title=\"Points\")\n\n# Show the plot\nfig.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:15.432539Z","iopub.execute_input":"2024-04-23T06:39:15.432919Z","iopub.status.idle":"2024-04-23T06:39:15.544106Z","shell.execute_reply.started":"2024-04-23T06:39:15.432892Z","shell.execute_reply":"2024-04-23T06:39:15.542762Z"},"trusted":true},"execution_count":21,"outputs":[{"output_type":"display_data","data":{"text/html":"<div>                            <div id=\"5f5ea722-d208-4be0-856b-6496bc1d3716\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"5f5ea722-d208-4be0-856b-6496bc1d3716\")) {                    Plotly.newPlot(                        \"5f5ea722-d208-4be0-856b-6496bc1d3716\",                        [{\"mode\":\"lines+markers\",\"name\":\"Lewis Hamilton\",\"x\":[125],\"y\":[46550.5],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Sebastian Vettel\",\"x\":[63],\"y\":[32026.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Max Verstappen\",\"x\":[44],\"y\":[22486.5],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Fernando Alonso\",\"x\":[52],\"y\":[21692.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Valtteri Bottas\",\"x\":[5],\"y\":[19458.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Kimi Räikkönen\",\"x\":[12],\"y\":[19069.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Nico Rosberg\",\"x\":[29],\"y\":[16910.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Michael Schumacher\",\"x\":[121],\"y\":[14514.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Jenson Button\",\"x\":[20],\"y\":[11708.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Felipe Massa\",\"x\":[2],\"y\":[11149.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Mark Webber\",\"x\":[6],\"y\":[10608.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Charles Leclerc\",\"x\":[5],\"y\":[10256.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Alain Prost\",\"x\":[79],\"y\":[6829.5],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Ayrton Senna\",\"x\":[48],\"y\":[5531.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"David Coulthard\",\"x\":[3],\"y\":[4939.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Nigel Mansell\",\"x\":[25],\"y\":[3928.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Nelson Piquet\",\"x\":[19],\"y\":[3903.5],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Niki Lauda\",\"x\":[42],\"y\":[3768.5],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Mika Häkkinen\",\"x\":[27],\"y\":[3329.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Damon Hill\",\"x\":[17],\"y\":[2942.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Robert Kubica\",\"x\":[1],\"y\":[2748.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Giancarlo Fisichella\",\"x\":[1],\"y\":[2641.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Carlos Reutemann\",\"x\":[13],\"y\":[2602.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Jackie Stewart\",\"x\":[33],\"y\":[2574.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Emerson Fittipaldi\",\"x\":[28],\"y\":[2273.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Jacques Villeneuve\",\"x\":[5],\"y\":[2083.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Jody Scheckter\",\"x\":[15],\"y\":[2064.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Jacques Laffite\",\"x\":[4],\"y\":[1876.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Denny Hulme\",\"x\":[12],\"y\":[1720.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Graham Hill\",\"x\":[27],\"y\":[1691.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Michele Alboreto\",\"x\":[6],\"y\":[1659.5],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Eddie Irvine\",\"x\":[5],\"y\":[1648.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Mario Andretti\",\"x\":[15],\"y\":[1594.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Jim Clark\",\"x\":[22],\"y\":[1516.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Clay Regazzoni\",\"x\":[6],\"y\":[1508.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"René Arnoux\",\"x\":[3],\"y\":[1463.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Jack Brabham\",\"x\":[24],\"y\":[1407.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"John Watson\",\"x\":[3],\"y\":[1391.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Keke Rosberg\",\"x\":[3],\"y\":[1373.5],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Patrick Depailler\",\"x\":[1],\"y\":[1349.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Alan Jones\",\"x\":[11],\"y\":[1316.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"James Hunt\",\"x\":[1],\"y\":[1206.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Juan Fangio\",\"x\":[35],\"y\":[1131.28],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Bruce McLaren\",\"x\":[6],\"y\":[1114.5],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Elio de Angelis\",\"x\":[2],\"y\":[1105.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"John Surtees\",\"x\":[1],\"y\":[931.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Didier Pironi\",\"x\":[4],\"y\":[880.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Stirling Moss\",\"x\":[7],\"y\":[805.5],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Gilles Villeneuve\",\"x\":[2],\"y\":[758.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Jochen Rindt\",\"x\":[8],\"y\":[670.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Mike Hawthorn\",\"x\":[5],\"y\":[536.2],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Nino Farina\",\"x\":[7],\"y\":[528.31],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Alberto Ascari\",\"x\":[14],\"y\":[523.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Pedro Rodríguez\",\"x\":[1],\"y\":[474.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Phil Hill\",\"x\":[4],\"y\":[470.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Maurice Trintignant\",\"x\":[2],\"y\":[400.31],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Lorenzo Bandini\",\"x\":[1],\"y\":[304.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Jean Behra\",\"x\":[1],\"y\":[298.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Wolfgang von Trips\",\"x\":[2],\"y\":[274.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Luigi Musso\",\"x\":[1],\"y\":[248.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Peter Collins\",\"x\":[2],\"y\":[229.0],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Piero Taruffi\",\"x\":[3],\"y\":[195.0],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"title\":{\"font\":{\"family\":\"Arial, sans-serif\",\"size\":30},\"text\":\"\\u003cb\\u003eDriver Points vs Wins\\u003c\\u002fb\\u003e\",\"x\":0.5},\"xaxis\":{\"title\":{\"text\":\"Wins\"}},\"yaxis\":{\"title\":{\"text\":\"Points\"}}},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('5f5ea722-d208-4be0-856b-6496bc1d3716');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>"},"metadata":{}}]},{"cell_type":"code","source":"# Correlation Factor\ncorrelation = df['points'].corr(df['Wins'])\nprint(correlation)","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:15.545654Z","iopub.execute_input":"2024-04-23T06:39:15.546092Z","iopub.status.idle":"2024-04-23T06:39:15.553865Z","shell.execute_reply.started":"2024-04-23T06:39:15.546065Z","shell.execute_reply":"2024-04-23T06:39:15.552527Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"0.6779269499822878\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Conclusion 2: This mean that 'No. of Points' and 'No. of Wins' have positive correlation. But not as much as constructors","metadata":{}},{"cell_type":"markdown","source":"### Hypothesis 3: Higher on grid, more chances to win!\nAlso qualifying time == grid position (lesser the time, higher on grid)","metadata":{}},{"cell_type":"code","source":"df_grid_wins = df_results[['raceId', 'driverId', 'grid', 'position']].copy()\ndf_grid_wins['Win'] = df_grid_wins['position'].apply(lambda x: 1 if x == 1 else 0)\n\nmean_wins_by_grid = (df_grid_wins.groupby('grid')['Win'].mean()*100).round(2)","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:15.555508Z","iopub.execute_input":"2024-04-23T06:39:15.555834Z","iopub.status.idle":"2024-04-23T06:39:15.590791Z","shell.execute_reply.started":"2024-04-23T06:39:15.555807Z","shell.execute_reply":"2024-04-23T06:39:15.589715Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"markdown","source":"Conclusion 3: Clearly see the relation between grid position and Wins.","metadata":{}},{"cell_type":"markdown","source":"### Hypothesis 4: Relaionship with Weather?\nRainfall can have huge impact on races as well as dry or humid weather or Hot or cold weather. \nWeather data for races is quite limited (2023-2018). So the weather analysis will only be done for these years.","metadata":{}},{"cell_type":"code","source":"threshold = 0.5\npercentage_rain = (((df_weather['Rainfall'] > threshold).sum() / len(df_weather)) * 100).round(2)\nprint(\"Percent of races when it rained more than 50% of the race: \", percentage_rain)\n\nraces_in_rain = df_weather[df_weather['Rainfall']>0]\n\n# Before we saw that grid 1, 2, 3 are likely to win 88% of the races. We would like to see how it changes during rain. Note that data is very less.\n\ndf_rain_grid_wins = df_grid_wins[df_grid_wins['raceId'].isin(races_in_rain['raceId'])]\n\nmean_wins_by_grid = (df_rain_grid_wins.groupby('grid')['Win'].mean()*100).round(2)","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:15.592123Z","iopub.execute_input":"2024-04-23T06:39:15.592477Z","iopub.status.idle":"2024-04-23T06:39:15.605423Z","shell.execute_reply.started":"2024-04-23T06:39:15.592450Z","shell.execute_reply":"2024-04-23T06:39:15.603880Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stdout","text":"Percent of races when it rained more than 50% of the race:  4.17\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Feature Engineering:\nCreate new features that might help improve the performance of your model. This could involve creating features that represent a driver's past performance, the performance of their team, etc.","metadata":{}},{"cell_type":"markdown","source":"Here I will be creating features (variables) for my model. These could include Constructor Experience, Driver Experience, Driver Age, Driver Wins, Constructor Wins, Driver Exp with Constructor, **Weather score**, Avg Pitstop time of constructor, DNF score (anything except finishing i.e., DNF, Accident, etc), CircuitsId, Length, Turns, Average Weather on circuit.","metadata":{}},{"cell_type":"code","source":"# Constructor Experience (By races, +1 for each driver)\n\ndf_constructor_experience = df_results[['raceId', 'constructorId', 'date']].sort_values('date')\n\n# Calculate the cumulative count of each constructor\ndf_constructor_experience['Constructor Experience'] = df_constructor_experience.groupby('constructorId').cumcount() + 1\n","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:15.607926Z","iopub.execute_input":"2024-04-23T06:39:15.608493Z","iopub.status.idle":"2024-04-23T06:39:15.652894Z","shell.execute_reply.started":"2024-04-23T06:39:15.608452Z","shell.execute_reply":"2024-04-23T06:39:15.651674Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"# Driver Experience (By races, +1 for each race)\n\ndf_driver_experience = df_results[['raceId', 'driverId', 'date']].sort_values('date')\n\n# Calculate the cumulative count of each driver\ndf_driver_experience['Driver Experience'] = df_driver_experience.groupby('driverId').cumcount() + 1","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:15.654832Z","iopub.execute_input":"2024-04-23T06:39:15.655800Z","iopub.status.idle":"2024-04-23T06:39:15.700009Z","shell.execute_reply.started":"2024-04-23T06:39:15.655754Z","shell.execute_reply":"2024-04-23T06:39:15.698720Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"# Driver Age\n\ndf_age = df_results[['raceId', 'driverId', 'date']]\ndf_age = pd.merge(df_age, df_drivers[['driverId', 'dob']], on='driverId', how='left')\n\n# Convert 'dob' and 'date' to datetime if they are not already\ndf_age['dob'] = pd.to_datetime(df_age['dob'])\ndf_age['date'] = pd.to_datetime(df_age['date'])\n\n# Calculate age at the time of each race\ndf_age['Driver Age'] = (df_age['date'] - df_age['dob']).dt.days // 365\n\n# Create the new dataframe with 'raceId', 'driverId', and 'age'\ndf_driver_age = df_age[['raceId', 'driverId', 'Driver Age']]","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:15.701705Z","iopub.execute_input":"2024-04-23T06:39:15.702052Z","iopub.status.idle":"2024-04-23T06:39:15.739491Z","shell.execute_reply.started":"2024-04-23T06:39:15.702022Z","shell.execute_reply":"2024-04-23T06:39:15.738310Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"# Driver Wins\n\ndf_driver_wins = df_results[['raceId', 'driverId', 'position', 'date']].sort_values('date')\n\n# Create a new column 'Win' which is 1 if the position is 1, else 0\ndf_driver_wins['Win'] = df_driver_wins['position'].apply(lambda x: 1 if x == 1 else 0)\n\n# Calculate the cumulative sum of wins for each driver\ndf_driver_wins['Driver Wins'] = df_driver_wins.groupby('driverId')['Win'].cumsum()","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:15.746796Z","iopub.execute_input":"2024-04-23T06:39:15.747392Z","iopub.status.idle":"2024-04-23T06:39:15.815598Z","shell.execute_reply.started":"2024-04-23T06:39:15.747357Z","shell.execute_reply":"2024-04-23T06:39:15.814226Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"# Constructor Wins\n\ndf_constructor_wins = df_constructor_standings[['raceId', 'constructorId', 'position', 'date']].sort_values('date')\n\n# Create a new column 'Win' which is 1 if the position is 1, else 0\ndf_constructor_wins['Win'] = df_constructor_wins['position'].apply(lambda x: 1 if x == 1 else 0)\n\n# Calculate the cumulative sum of wins for each driver\ndf_constructor_wins['Constructor Wins'] = df_constructor_wins.groupby('constructorId')['Win'].cumsum()\n\ndf_constructor_wins['Constructor Wins'] = df_constructor_wins['Constructor Wins'].astype(int)","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:15.817087Z","iopub.execute_input":"2024-04-23T06:39:15.817505Z","iopub.status.idle":"2024-04-23T06:39:15.857577Z","shell.execute_reply.started":"2024-04-23T06:39:15.817475Z","shell.execute_reply":"2024-04-23T06:39:15.856587Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"code","source":"# Driver Exp with Constructor\ndf_driver_constructor_exp = df_results[['raceId', 'constructorId', 'driverId', 'date']].sort_values('date')\n\ndf_driver_constructor_exp['Driver Constructor Experience'] = df_driver_constructor_exp.groupby(['driverId', 'constructorId']).cumcount() + 1","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:15.859297Z","iopub.execute_input":"2024-04-23T06:39:15.860422Z","iopub.status.idle":"2024-04-23T06:39:15.906836Z","shell.execute_reply.started":"2024-04-23T06:39:15.860385Z","shell.execute_reply":"2024-04-23T06:39:15.905314Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"# Average Pit Stop time\n\n#df_merged = pd.merge(df_pit_stops, df_results[['raceId', 'driverId', 'constructorId']], on=['raceId', 'driverId'], how='inner')\n#df_avg_duration = df_merged.groupby('constructorId')['milliseconds'].mean().reset_index().round(2)\n#df_results['constructorId'].unique()","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:15.908290Z","iopub.execute_input":"2024-04-23T06:39:15.908834Z","iopub.status.idle":"2024-04-23T06:39:15.914256Z","shell.execute_reply.started":"2024-04-23T06:39:15.908804Z","shell.execute_reply":"2024-04-23T06:39:15.912559Z"},"trusted":true},"execution_count":31,"outputs":[]},{"cell_type":"code","source":"# DNF Score\n\n# Removing '+n Laps'\ndf_status = df_status[~df_status['status'].str.contains(\"\\+\\d+ Laps\")]\ndf_status = df_status.drop(0)\n\ndf_finish = df_results[['raceId', 'driverId', 'constructorId', 'statusId', 'date']].copy()\ndf_finish.loc[:, 'Finish'] = (~df_finish['statusId'].isin(df_status['statusId'])).astype(int)\ndf_finish['date'] = pd.to_datetime(df_finish['date'])\n\n# Sort the DataFrame by date in ascending order\ndf_finish = df_finish.sort_values('date')\n\n# Calculate the cumulative average of the 'Finish' column for each constructor\ndf_finish['DNF Score'] = df_finish.groupby('constructorId')['Finish'].expanding().mean().round(2).reset_index(level=0, drop=True)","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:15.916117Z","iopub.execute_input":"2024-04-23T06:39:15.916532Z","iopub.status.idle":"2024-04-23T06:39:15.962741Z","shell.execute_reply.started":"2024-04-23T06:39:15.916504Z","shell.execute_reply":"2024-04-23T06:39:15.961038Z"},"trusted":true},"execution_count":32,"outputs":[]},{"cell_type":"markdown","source":"Now I will create a complete table with all the features for all races, drivers and constructors with the variables created in the Feature Engineering section.","metadata":{}},{"cell_type":"code","source":"formula_1 = df_results[['raceId', 'driverId', 'constructorId', 'grid', 'position', 'laps', 'seconds', 'fastestLapSpeed', 'date', 'circuitId']]\n\n# Circuits Length and Turns\nformula_1 = formula_1.merge(df_circuits[['circuitId', 'Length', 'Turns']], on='circuitId', how='left')\n\n# Constructor Experience (No. of races by drivers)\nformula_1 = formula_1.merge(df_constructor_experience[['raceId', 'constructorId', 'Constructor Experience']], on=['raceId', 'constructorId'], how='left')\n\n# Driver Experience (No. of races)\nformula_1 = formula_1.merge(df_driver_experience[['raceId', 'driverId', 'Driver Experience']], on=['raceId', 'driverId'], how='left')\n\n# Driver Age\nformula_1 = formula_1.merge(df_driver_age[['raceId', 'driverId', 'Driver Age']], on=['raceId', 'driverId'], how='left')\n\n# Driver Wins\nformula_1 = formula_1.merge(df_driver_wins[['raceId', 'driverId', 'Driver Wins']], on=['raceId', 'driverId'], how='left')\n\n# Constructor Wins\nformula_1 = formula_1.merge(df_constructor_wins[['raceId', 'constructorId', 'Constructor Wins']], on=['raceId', 'constructorId'], how='left')\n\n# Driver Experience with Constructor\nformula_1 = formula_1.merge(df_driver_constructor_exp[['raceId', 'constructorId', 'driverId', 'Driver Constructor Experience']], on=['raceId', 'constructorId', 'driverId'], how='left')\n\n# DNF Score\nformula_1 = formula_1.merge(df_finish[['raceId', 'constructorId', 'DNF Score']], on=['raceId', 'constructorId'], how='left')","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:15.964373Z","iopub.execute_input":"2024-04-23T06:39:15.964736Z","iopub.status.idle":"2024-04-23T06:39:16.814794Z","shell.execute_reply.started":"2024-04-23T06:39:15.964707Z","shell.execute_reply":"2024-04-23T06:39:16.813667Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"code","source":"# Adding a new feature 'prev_position' that holds the position of driver from previous race\n# Possible improvement in this could be averaging out last 3 races instead of 1.\n\nformula_1 = formula_1.sort_values(['driverId', 'date'])\nformula_1['prev_position'] = formula_1.groupby('driverId')['position'].shift(1)\nformula_1['prev_position'] = formula_1['prev_position'].fillna(0)","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:16.816469Z","iopub.execute_input":"2024-04-23T06:39:16.816767Z","iopub.status.idle":"2024-04-23T06:39:17.176485Z","shell.execute_reply.started":"2024-04-23T06:39:16.816741Z","shell.execute_reply":"2024-04-23T06:39:17.175278Z"},"trusted":true},"execution_count":34,"outputs":[]},{"cell_type":"code","source":"# Clean the final table\n\nformula_1 = formula_1.drop_duplicates(subset=['raceId', 'driverId', 'constructorId'], keep='last')\n\n# Change second argument to select positions for prediction\npos = list(range(1, 21))\nformula_1 = formula_1[formula_1['position'].isin(pos)]\n\nformula_1 = formula_1[formula_1['Constructor Wins'].notnull()]\n\nformula_1 = formula_1[formula_1['date']>='1980-01-01']\n\n#formula_1['podium'] = formula_1['position'].apply(lambda x: x) # All Positions\n#formula_1['podium'] = formula_1['position'].apply(lambda x: x if 1<=x<=3 else 0) # All Positions, (this creates a false boost in accuracy) \nformula_1['podium'] = formula_1['position'].apply(lambda x: x if 1<=x<=3 else 0)\n\nformula_1.to_csv('formula1.csv', index=False)\n#formula_1[formula_1['prev_position']!=formula_1['podium']]","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:17.178324Z","iopub.execute_input":"2024-04-23T06:39:17.179508Z","iopub.status.idle":"2024-04-23T06:39:17.447515Z","shell.execute_reply.started":"2024-04-23T06:39:17.179466Z","shell.execute_reply":"2024-04-23T06:39:17.446365Z"},"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"markdown","source":"# Model Building\nChoose an appropriate model for your problem. This could be a regression model, a classification model, or even a time series model, depending on your problem statement.","metadata":{}},{"cell_type":"markdown","source":"There was a problem with data leakage, where accuracy of model was 99% but cross validation scores were 50%. Found out that a column 'seconds' was causing this discripancy. So removed it from the training dataset, and achieved an accuracy of 98% and cross validation score of 90%.\n\nPossible Imporvement: Class Imbalance -> Sampling","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\n# Drop 'position' and other unnecessary columns\nX = formula_1.drop(['position', 'seconds', 'podium', 'date', 'fastestLapSpeed', 'raceId'], axis=1)\ny = formula_1['podium']  # target variable\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:17.449277Z","iopub.execute_input":"2024-04-23T06:39:17.449703Z","iopub.status.idle":"2024-04-23T06:39:18.204779Z","shell.execute_reply.started":"2024-04-23T06:39:17.449661Z","shell.execute_reply":"2024-04-23T06:39:18.203672Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"code","source":"# Testing different models with Cross Validation Score\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score\n\n# Initialize the models\nclf1 = RandomForestClassifier(random_state=42)\nclf2 = SVC(random_state=42)\nclf3 = KNeighborsClassifier()\n\n# List of models\nmodels = [clf1, clf2, clf3]\n\n# Dictionary to hold the model names and their scores\nscores = {}\n\nfor model in models:\n    model_name = model.__class__.__name__\n    score = cross_val_score(model, X, y, cv=5).mean()\n    scores[model_name] = score\n\n# Print the scores\nfor model, score in scores.items():\n    print(f\"{model}: {score:.2f}\")","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:18.206169Z","iopub.execute_input":"2024-04-23T06:39:18.206476Z","iopub.status.idle":"2024-04-23T06:39:36.632835Z","shell.execute_reply.started":"2024-04-23T06:39:18.206450Z","shell.execute_reply":"2024-04-23T06:39:36.631310Z"},"trusted":true},"execution_count":37,"outputs":[{"name":"stdout","text":"RandomForestClassifier: 0.99\nSVC: 0.80\nKNeighborsClassifier: 0.61\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Model Training\n\nTrain your model using your training data. Tune the hyperparameters to get the best performance.\n\nRandom Forest Classifer performed best among KNN, SVM. Therefore, I'll move ahead with Random Forest Classifier.","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\n\n# Define the pipeline\nformula1_predict = Pipeline([\n    ('classifier', RandomForestClassifier(n_estimators=50, random_state=42))  # Use RandomForestClassifier with n_estimators=50\n])\n\n# Fit the pipeline on the training data\nformula1_predict.fit(X, y)\n\n# Predict the target variable for the test set\ny_pred = formula1_predict.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:36.634285Z","iopub.execute_input":"2024-04-23T06:39:36.634633Z","iopub.status.idle":"2024-04-23T06:39:37.218523Z","shell.execute_reply.started":"2024-04-23T06:39:36.634604Z","shell.execute_reply":"2024-04-23T06:39:37.217112Z"},"trusted":true},"execution_count":38,"outputs":[]},{"cell_type":"markdown","source":"# Model Evaluation\n\nEvaluate the performance of your model using appropriate metrics. This could be accuracy, precision, recall, F1 score, etc., depending on your problem statement.","metadata":{}},{"cell_type":"code","source":"# Accuracy and Cross Validation Scores\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score\n\nrfc_accuracy = accuracy_score(y_test, y_pred)\nrfc_cv = cross_val_score(formula1_predict, X, y, cv=5)\n\nprint(f\"Accuracy of the Random Forest Classifier: {rfc_accuracy*100:.2f}%\")\nprint(f\"Average cross-validation score: {rfc_cv.mean()*100:.2f}%\")","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:37.220297Z","iopub.execute_input":"2024-04-23T06:39:37.220858Z","iopub.status.idle":"2024-04-23T06:39:39.628595Z","shell.execute_reply.started":"2024-04-23T06:39:37.220826Z","shell.execute_reply":"2024-04-23T06:39:39.627232Z"},"trusted":true},"execution_count":39,"outputs":[{"name":"stdout","text":"Accuracy of the Random Forest Classifier: 100.00%\nAverage cross-validation score: 99.15%\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Model Deployment\nIf your model's performance is satisfactory, deploy the model. This could involve integrating the model with a web application, setting up a REST API, etc.","metadata":{}},{"cell_type":"code","source":"from joblib import dump\n\ndump(formula1_predict, 'formula1_model.joblib')","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:39.630452Z","iopub.execute_input":"2024-04-23T06:39:39.630891Z","iopub.status.idle":"2024-04-23T06:39:39.685717Z","shell.execute_reply.started":"2024-04-23T06:39:39.630853Z","shell.execute_reply":"2024-04-23T06:39:39.684321Z"},"trusted":true},"execution_count":40,"outputs":[{"execution_count":40,"output_type":"execute_result","data":{"text/plain":"['formula1_model.joblib']"},"metadata":{}}]},{"cell_type":"markdown","source":"# Try It Out\nEnter Driver Name, Circuit Location (e.g., 'Sakhir' or 'Shanghai'), and Grid Position of driver to find out which podium position he finishes at.","metadata":{}},{"cell_type":"code","source":"def prediction(driver_name, grid, circuit_loc):\n    driver = df_drivers.loc[df_drivers['Name']==driver_name, 'driverId'].iloc[0]\n    circuit = df_circuits.loc[df_circuits['location']==circuit_loc, ['circuitId', 'laps']].iloc[0]\n\n    input_data = formula_1[formula_1['driverId'] == driver].sort_values(by='date', ascending=False).iloc[0]\n    circuit_data = df_circuits[df_circuits['location']==circuit_loc].iloc[0]\n\n    features = {\n        'driverId': input_data['driverId'],\n        'constructorId': input_data['constructorId'],\n        'grid': grid,\n        'laps': circuit_data['laps'],\n        'circuitId': circuit_data['circuitId'],\n        'Length': circuit_data['Length'],\n        'Turns': circuit_data['Turns'],\n        'Constructor Experience': input_data['Constructor Experience'],\n        'Driver Experience': input_data['Driver Experience'],\n        'Driver Age': input_data['Driver Age'],\n        'Driver Wins': input_data['Driver Wins'],\n        'Constructor Wins': input_data['Constructor Wins'],\n        'Driver Constructor Experience': input_data['Driver Constructor Experience'],\n        'DNF Score': input_data['DNF Score'],\n        'prev_position': input_data['prev_position']\n    }\n    features = pd.DataFrame([features])\n    #print(features)\n    \n    return formula1_predict.predict(features), formula1_predict.predict_proba(features)","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:39:39.687230Z","iopub.execute_input":"2024-04-23T06:39:39.687632Z","iopub.status.idle":"2024-04-23T06:39:39.698560Z","shell.execute_reply.started":"2024-04-23T06:39:39.687604Z","shell.execute_reply":"2024-04-23T06:39:39.697314Z"},"trusted":true},"execution_count":41,"outputs":[]},{"cell_type":"code","source":"# Drivers is the list of driver in the race, sorted by their grid position\ndrivers = ['Max Verstappen', 'Charles Leclerc', 'George Russell', 'Carlos Sainz', 'Sergio Pérez', 'Fernando Alonso', 'Lando Norris', 'Oscar Piastri', 'Lewis Hamilton', 'Nico Hülkenberg', 'Yuki Tsunoda', 'Lance Stroll', 'Alexander Albon', 'Daniel Ricciardo', 'Kevin Magnussen', 'Valtteri Bottas', 'Logan Sargeant', 'Esteban Ocon', 'Pierre Gasly']\n\n# Grids is a list of grid positions from your table\ngrids = list(range(1, 21))\n\n# Location of circuit\ncircuit_loc = 'Sakhir'\n\npredictions = []\n\n# Iterate over drivers and their corresponding grid positions\nfor driver_name, grid in zip(drivers, grids):\n    # Call your prediction function and print the result\n    pred, prob = prediction(driver_name, grid, circuit_loc)\n    if pred in [1, 2, 3]:\n        predictions.append({\n        'Driver Name ': driver_name,\n        'Grid': grid,\n        'Prediction': pred,\n        'Probability': np.max(prob)\n        })\n    #print(f'{driver_name}, {grid}, {pred}, prob: {prob}')\n\npredictions","metadata":{"execution":{"iopub.status.busy":"2024-04-23T07:21:57.177807Z","iopub.execute_input":"2024-04-23T07:21:57.178250Z","iopub.status.idle":"2024-04-23T07:21:57.545850Z","shell.execute_reply.started":"2024-04-23T07:21:57.178219Z","shell.execute_reply":"2024-04-23T07:21:57.544498Z"},"trusted":true},"execution_count":46,"outputs":[{"execution_count":46,"output_type":"execute_result","data":{"text/plain":"[{'Driver Name ': 'Max Verstappen',\n  'Grid': 1,\n  'Prediction': array([1]),\n  'Probability': 1.0},\n {'Driver Name ': 'Charles Leclerc',\n  'Grid': 2,\n  'Prediction': array([3]),\n  'Probability': 0.7},\n {'Driver Name ': 'Sergio Pérez',\n  'Grid': 5,\n  'Prediction': array([2]),\n  'Probability': 0.78}]"},"metadata":{}}]},{"cell_type":"markdown","source":"# Streamlit App","metadata":{}},{"cell_type":"markdown","source":"Kaggle doesn't run streamlit app. Copy this code and run it on local machine.","metadata":{}},{"cell_type":"markdown","source":"import streamlit as st\nimport numpy as np\nimport pandas as pd\nfrom joblib import load\n\n# Load your model\nmodel = load(\"formula1_model.joblib\")\n\n# Load your data\ndf_formula1 = pd.read_csv(\"formula1.csv\")\ndf_circuits = pd.read_csv(\"circuits.csv\")\ndf_drivers = pd.read_csv(\"drivers.csv\")\n\ndef prediction(driver_name, grid, circuit_loc):\n    # Your prediction logic here\n    # Use the loaded model for prediction\n    driver = df_drivers.loc[df_drivers['Name']==driver_name, 'driverId'].iloc[0]\n    circuit = df_circuits.loc[df_circuits['location']==circuit_loc, ['circuitId', 'laps']].iloc[0]\n\n    input_data = df_formula1[df_formula1['driverId'] == driver].sort_values(by='date', ascending=False).iloc[0]\n    circuit_data = df_circuits[df_circuits['location']==circuit_loc].iloc[0]\n\n    features = {\n        'driverId': input_data['driverId'],\n        'constructorId': input_data['constructorId'],\n        'grid': grid,\n        'laps': circuit_data['laps'],\n        'circuitId': circuit_data['circuitId'],\n        'Length': circuit_data['Length'],\n        'Turns': circuit_data['Turns'],\n        'Constructor Experience': input_data['Constructor Experience'],\n        'Driver Experience': input_data['Driver Experience'],\n        'Driver Age': input_data['Driver Age'],\n        'Driver Wins': input_data['Driver Wins'],\n        'Constructor Wins': input_data['Constructor Wins'],\n        'Driver Constructor Experience': input_data['Driver Constructor Experience'],\n        'DNF Score': input_data['DNF Score'],\n        'prev_position': input_data['prev_position']\n    }\n    features = pd.DataFrame([features])\n    \n    return model.predict(features), model.predict_proba(features)\n\n\n\ndef main():\n    st.title('F1 Race Prediction')\n\n    # front end elements of the web pagea \n    html_temp = \"\"\" \n        <div style =\"background-color:yellow;padding:13px\"> \n        <h1 style =\"color:black;text-align:center;\">F1 Race Prediction</h1> \n        </div> \n        \"\"\"\n        # display the front end aspect\n    st.markdown(html_temp, unsafe_allow_html = True) \n    # Input for driver names\n    all_drivers = ['Max Verstappen', 'Charles Leclerc', 'George Russell', 'Carlos Sainz', 'Sergio Pérez', 'Fernando Alonso', 'Lando Norris', 'Oscar Piastri', 'Lewis Hamilton', 'Nico Hülkenberg', 'Yuki Tsunoda', 'Lance Stroll', 'Alexander Albon', 'Daniel Ricciardo', 'Kevin Magnussen', 'Valtteri Bottas', 'Logan Sargeant', 'Esteban Ocon', 'Pierre Gasly']\n    selected_drivers = st.multiselect('Select drivers:', all_drivers)\n    # Output selected drivers\n    st.write('Selected drivers:', selected_drivers)\n\n    # Input for grid positions\n    grid_positions = st.text_input('Enter grid positions for selected drivers (comma separated):')\n    grid_positions = list(map(int, grid_positions.split(',')))\n\n    # Input for circuit location\n    circuit_loc = st.text_input('Enter circuit location:')\n    \n    predictions = []\n\n    # Function Call\n    if st.button('Predict'):\n            for driver_name, grid in zip(selected_drivers, grid_positions):\n                pred, prob = prediction(driver_name, grid, circuit_loc)\n                predictions.append({\n                    'Driver Name': driver_name,\n                    'Grid': grid,\n                    'Prediction': pred,\n                    'Probability': np.max(prob)\n                })\n\n            st.success(\"Drivers on Podium: \\n {}\".format(predictions))\n\nif __name__ == '__main__':\n    main()","metadata":{"execution":{"iopub.status.busy":"2024-04-23T06:46:29.124438Z","iopub.execute_input":"2024-04-23T06:46:29.124878Z","iopub.status.idle":"2024-04-23T06:46:29.720188Z","shell.execute_reply.started":"2024-04-23T06:46:29.124847Z","shell.execute_reply":"2024-04-23T06:46:29.716935Z"}}}]}